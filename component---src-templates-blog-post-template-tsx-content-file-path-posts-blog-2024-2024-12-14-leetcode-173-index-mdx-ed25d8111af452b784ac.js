"use strict";(self.webpackChunkportfolio_app=self.webpackChunkportfolio_app||[]).push([[3259],{8381:function(e,n,t){t.r(n),t.d(n,{BlogPost:function(){return m},default:function(){return h}});var r=t(8453),l=t(6540);function o(e){const n=Object.assign({p:"p",h1:"h1",pre:"pre",code:"code"},(0,r.R)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.p,null,"Here are two solutions. One is recursive and the other iterative.\r\nThe iterative solution is better as it can handle larger inputs."),"\n",l.createElement(n.h1,null,"Solution"),"\n",l.createElement(n.p,null,"Recursive"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-python"},"from collections import deque\r\n# Definition for a binary tree node.\r\n# class TreeNode:\r\n#     def __init__(self, val=0, left=None, right=None):\r\n#         self.val = val\r\n#         self.left = left\r\n#         self.right = right\r\nclass BSTIterator:\r\n\r\n    def __init__(self, root: Optional[TreeNode]):\r\n        self.nodes = deque([])\r\n\r\n        def traverse(node):\r\n            if not node:\r\n                return\r\n            \r\n            traverse(node.left)\r\n            self.nodes.append(node.val)\r\n            traverse(node.right)\r\n        \r\n        traverse(root)\r\n        \r\n\r\n    def next(self) -> int:\r\n        return self.nodes.popleft()\r\n\r\n    def hasNext(self) -> bool:\r\n        return len(self.nodes) > 0\r\n\r\n\r\n# Your BSTIterator object will be instantiated and called as such:\r\n# obj = BSTIterator(root)\r\n# param_1 = obj.next()\r\n# param_2 = obj.hasNext()\n")),"\n",l.createElement(n.p,null,"Time complexity is O(n) = n and space complexity is O(h)."),"\n",l.createElement(n.p,null,"iterative"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-python"},"from collections import deque\r\n# Definition for a binary tree node.\r\n# class TreeNode:\r\n#     def __init__(self, val=0, left=None, right=None):\r\n#         self.val = val\r\n#         self.left = left\r\n#         self.right = right\r\nclass BSTIterator:\r\n\r\n    def __init__(self, root: Optional[TreeNode]):\r\n        self.nodes = []\r\n        self.pushAll(root)      \r\n\r\n    def next(self) -> int:\r\n        node = self.nodes.pop()\r\n        self.pushAll(node.right)\r\n        return node.val\r\n\r\n    def hasNext(self) -> bool:\r\n        return len(self.nodes) > 0\r\n    \r\n    def pushAll(self, node):\r\n        while node:\r\n            self.nodes.append(node)\r\n            node = node.left\r\n\r\n\r\n\r\n# Your BSTIterator object will be instantiated and called as such:\r\n# obj = BSTIterator(root)\r\n# param_1 = obj.next()\r\n# param_2 = obj.hasNext()\n")))}var a=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.R)(),e.components);return n?l.createElement(n,e,l.createElement(o,e)):o(e)},s=t(4810),i=t(4399),c=t(3614),d=t(1510),f=t(6409),u=t(572);const m=d.default.div.withConfig({displayName:"blogPostTemplate__BlogPost",componentId:"sc-6bdelx-0"})(["margin:0 auto;margin-top:6em;max-width:800px;padding:20px;"]);function p(e){let{data:n,pageContext:t,children:r}=e;const{frontmatter:o}=n.mdx,{previous:a,next:p,post:h}=t;return l.createElement(i.A,null,l.createElement(d.ThemeProvider,{theme:c.w4},l.createElement(c.nB,null,l.createElement(f.A,null),l.createElement(m,null,l.createElement(c.DZ,{className:"text-center"},o.title),l.createElement("p",{className:"text-center"},h.frontmatter.date),r,a&&l.createElement(l.Fragment,null,a&&l.createElement(s.N_,{to:a.fields.slug},l.createElement("p",null,a.frontmatter.title))),p&&l.createElement(l.Fragment,null,p&&l.createElement(s.N_,{to:p.fields.slug},l.createElement("p",null,p.frontmatter.title)))),l.createElement(u.A,null))))}function h(e){return l.createElement(p,e,l.createElement(a,e))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-template-tsx-content-file-path-posts-blog-2024-2024-12-14-leetcode-173-index-mdx-ed25d8111af452b784ac.js.map