"use strict";(self.webpackChunkportfolio_app=self.webpackChunkportfolio_app||[]).push([[7774],{7221:function(e,n,t){t.r(n),t.d(n,{BlogPost:function(){return u},default:function(){return h}});var r=t(8453),o=t(6540);function l(e){const n=Object.assign({p:"p",h1:"h1",pre:"pre",code:"code"},(0,r.R)(),e.components);return o.createElement(o.Fragment,null,o.createElement(n.p,null,"This problem stumped me for a while because I needed to use a dictionary to make sure I didn't have duplicate copies, then I also forgot to return the copy at the end of the DFS algorithm."),"\n",o.createElement(n.h1,null,"Solution"),"\n",o.createElement(n.pre,null,o.createElement(n.code,{className:"language-python"},'"""\r\n# Definition for a Node.\r\nclass Node:\r\n    def __init__(self, val = 0, neighbors = None):\r\n        self.val = val\r\n        self.neighbors = neighbors if neighbors is not None else []\r\n"""\r\nfrom typing import Optional\r\nclass Solution:\r\n    def cloneGraph(self, node: Optional[\'Node\']) -> Optional[\'Node\']:\r\n        if not node:\r\n            return None\r\n\r\n        copies = {}\r\n\r\n        def dfs(node):\r\n            if node in copies:\r\n                return copies[node]\r\n            \r\n            copy = Node(node.val)\r\n            copies[node] = copy\r\n            for n in node.neighbors:\r\n                copy.neighbors.append(dfs(n))\r\n            \r\n            return copy\r\n        \r\n        dfs(node)\r\n\r\n        return copies[node]\n')),"\n",o.createElement(n.p,null,"The time complexity is O(V + E) since we visit every node and edge once, and then the space complexity is O(V) because our copies dictionary is always the number of verticies in the graph. The recursive call stack is also at worst case O(V) space complexity."))}var a=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.R)(),e.components);return n?o.createElement(n,e,o.createElement(l,e)):l(e)},c=t(4810),i=t(4399),s=t(3614),p=t(1510),m=t(6409),d=t(572);const u=p.default.div.withConfig({displayName:"blogPostTemplate__BlogPost",componentId:"sc-6bdelx-0"})(["margin:0 auto;margin-top:6em;max-width:800px;padding:20px;"]);function f(e){let{data:n,pageContext:t,children:r}=e;const{frontmatter:l}=n.mdx,{previous:a,next:f,post:h}=t;return o.createElement(i.A,null,o.createElement(p.ThemeProvider,{theme:s.w4},o.createElement(s.nB,null,o.createElement(m.A,null),o.createElement(u,null,o.createElement(s.DZ,{className:"text-center"},l.title),o.createElement("p",{className:"text-center"},h.frontmatter.date),r,a&&o.createElement(o.Fragment,null,a&&o.createElement(c.N_,{to:a.fields.slug},o.createElement("p",null,a.frontmatter.title))),f&&o.createElement(o.Fragment,null,f&&o.createElement(c.N_,{to:f.fields.slug},o.createElement("p",null,f.frontmatter.title)))),o.createElement(d.A,null))))}function h(e){return o.createElement(f,e,o.createElement(a,e))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-template-tsx-content-file-path-posts-2024-2024-12-18-leetcode-133-index-mdx-49ceb743ffed01ca543c.js.map