{"version":3,"file":"component---src-templates-blog-post-template-js-4de4643d925dc1c01bde.js","mappings":"wLAgCO,MAAMA,EAAa,gBAAoB,IAiCvC,SAASC,EAAiBC,GAC/B,MAAMC,EAAoB,aAAiBH,GAE3C,OAAO,WAAc,IAEO,mBAAfE,EACFA,EAAWC,GAGb,IAAIA,KAAsBD,IAChC,CAACC,EAAmBD,IAIzB,MAAME,EAAc,GAQb,SAASC,GAAY,WAACH,EAAU,SAAEI,EAAQ,qBAAEC,IACjD,IAAIC,EAAgBP,EAAiBC,GAMrC,OAJIK,IACFC,EAAgBN,GAAcE,GAGzB,gBACLJ,EAAWS,SACX,CAACC,MAAOF,GACRF,G,cC3EJ,MApBaK,GACX,uBACEC,MAAO,CACLC,SAAU,GACVC,OAAQ,oBACRC,QAAS,GACTC,WAAY,UAGbC,OAAOC,QAAQP,GAAOQ,KAAI,QAAEC,EAAKC,GAAP,SACzB,uBAAKD,IAAKA,GACR,0BAAQR,MAAO,CAAEU,MAAO,QAASN,WAAY,QAC1CI,EADH,OAGCG,KAAKC,UAAUH,EAAK,GAAI,UCVlB,SAASI,EAAT,GAA4D,IAAlC,KAAEC,EAAF,YAAQC,EAAR,SAAqBrB,GAAY,EAWtE,MAAM,YAAEsB,EAAF,KAAeC,GAASH,EAAKI,KAC7B,SAAEC,EAAF,KAAYC,EAAZ,KAAkBC,GAASN,EAEjC,OACI,gBAACO,EAAA,EAAD,KACI,gBAAC,EAAD,CAAMH,SAAUA,IAChB,gBAAC,EAAD,CAAMC,KAAMA,IACZ,0BAAKJ,EAAYO,OACjB,yBAAIP,EAAYQ,MAChB,gBAAC/B,EAAD,KAAcC,IACA,IAAbyB,EAAqB,KAClB,gCACKA,GACG,gBAAC,KAAD,CAAMM,GAAIN,EAASO,OAAOC,MACtB,yBAAIR,EAASH,YAAYO,UAK/B,IAATH,EAAiB,KACd,gCACKA,GACG,gBAAC,KAAD,CAAMK,GAAIL,EAAKM,OAAOC,MAClB,yBAAIP,EAAKJ,YAAYO","sources":["webpack://portfolio-app/./node_modules/@mdx-js/react/lib/index.js","webpack://portfolio-app/./src/components/Dump.js","webpack://portfolio-app/./src/templates/blogPostTemplate.js"],"sourcesContent":["/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means itâ€™s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means itâ€™s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n","import React from 'react'\r\n\r\nconst Dump = props => (\r\n  <div\r\n    style={{\r\n      fontSize: 20,\r\n      border: '1px solid #efefef',\r\n      padding: 10,\r\n      background: 'white',\r\n    }}\r\n  >\r\n    {Object.entries(props).map(([key, val]) => (\r\n      <pre key={key}>\r\n        <strong style={{ color: 'white', background: 'red' }}>\r\n          {key} ðŸ’©\r\n        </strong>\r\n        {JSON.stringify(val, '', ' ')}\r\n      </pre>\r\n    ))}\r\n  </div>\r\n)\r\n\r\nexport default Dump","import { graphql, Link } from 'gatsby'\r\nimport { MDXProvider } from '@mdx-js/react'\r\nimport React from 'react'\r\nimport Layout from '../components/Layout'\r\nimport Dump from '../components/Dump'\r\n\r\nexport default function blogPostTemplate({ data, pageContext, children }) {\r\n    \r\n    \r\n    /*\r\n    return (\r\n        <>\r\n            <Dump query={query.mdx} />\r\n            <Dump data={data} />\r\n            <Dump pageContext={pageContext} />\r\n        </>\r\n    ); */\r\n    const { frontmatter, body } = data.mdx; // data is from the exported graphql query below\r\n    const { previous, next, post } = pageContext;\r\n    \r\n    return (\r\n        <Layout>\r\n            <Dump previous={previous} />\r\n            <Dump next={next} />\r\n            <h1>{frontmatter.title}</h1>\r\n            <p>{frontmatter.date}</p>\r\n            <MDXProvider>{children}</MDXProvider>\r\n            {previous === false ? null : (\r\n                <>\r\n                    {previous && (\r\n                        <Link to={previous.fields.slug}>\r\n                            <p>{previous.frontmatter.title}</p>\r\n                        </Link>\r\n                    )}\r\n                </>\r\n            )}\r\n            {next === false ? null : (\r\n                <>\r\n                    {next && (\r\n                        <Link to={next.fields.slug}>\r\n                            <p>{next.frontmatter.title}</p>\r\n                        </Link>\r\n                    )}\r\n                </>\r\n            )}\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport const query = graphql`\r\n        query PostsBySlug($slug: String) {\r\n            mdx(fields: { slug: { eq: $slug } }) {\r\n                frontmatter {\r\n                    title\r\n                }\r\n            }\r\n        }\r\n    `;"],"names":["MDXContext","useMDXComponents","components","contextComponents","emptyObject","MDXProvider","children","disableParentContext","allComponents","Provider","value","props","style","fontSize","border","padding","background","Object","entries","map","key","val","color","JSON","stringify","blogPostTemplate","data","pageContext","frontmatter","body","mdx","previous","next","post","Layout","title","date","to","fields","slug"],"sourceRoot":""}