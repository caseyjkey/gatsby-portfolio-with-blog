{"version":3,"file":"component---src-templates-blog-post-template-jsx-content-file-path-posts-2024-2024-12-14-leetcode-173-index-mdx-d6babd3931d0661d17cf.js","mappings":"uNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,KAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,yIAA0I,KAAMM,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,YAAa,KAAMK,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,aAAc,KAAMM,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CACnbI,UAAW,mBACV,26BAA46B,KAAMD,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,6DAA8D,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,aAAc,KAAMM,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CAC9qCI,UAAW,mBACV,g4BACL,CAKA,MAJA,SAAoBX,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,KAAsBR,EAAMS,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWb,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oECTO,MAAMc,EAAYC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,6BAAAC,YAAA,gBAAVJ,CAAU,gEAMnC,SAASK,EAAgBC,GAAgC,IAA/B,KAACC,EAAI,YAAEC,EAAW,SAAEC,GAASH,EACrD,MAAM,YAACI,GAAeH,EAAKI,KACrB,SAACC,EAAQ,KAAEC,EAAI,KAAEC,GAAQN,EAC/B,OAAOb,EAAAA,cAAoBoB,EAAAA,EAAQ,KAAMpB,EAAAA,cAAoBqB,EAAAA,cAAe,CAC1EC,MAAOA,EAAAA,IACNtB,EAAAA,cAAoBuB,EAAAA,GAAM,KAAMvB,EAAAA,cAAoBwB,EAAAA,GAAaxB,EAAAA,cAAoBI,EAAU,KAAMJ,EAAAA,cAAoByB,EAAAA,GAAS,CACnIxB,UAAW,eACVc,EAAYW,OAAQ1B,EAAAA,cAAoB,IAAK,CAC9CC,UAAW,eACVkB,EAAKJ,YAAYY,MAAOb,EAAUG,GAAYjB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMiB,GAAYjB,EAAAA,cAAoB4B,EAAAA,GAAM,CAC/HC,GAAIZ,EAASa,OAAOC,MACnB/B,EAAAA,cAAoB,IAAK,KAAMiB,EAASF,YAAYW,SAAUR,GAAQlB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMkB,GAAQlB,EAAAA,cAAoB4B,EAAAA,GAAM,CACnJC,GAAIX,EAAKY,OAAOC,MACf/B,EAAAA,cAAoB,IAAK,KAAMkB,EAAKH,YAAYW,UAAW1B,EAAAA,cAAoBgC,EAAAA,KACpF,CACe,SAASC,EAAiB3C,GACvC,OAAOU,EAAAA,cAAoBU,EAAkBpB,EAAOU,EAAAA,cAAoBkC,EAAqB5C,GAC/F,C","sources":["webpack://portfolio-app/./posts/2024/2024-12-14-leetcode-173/index.mdx","webpack://portfolio-app/./src/templates/blogPostTemplate.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Here are two solutions. One is recursive and the other iterative.\\r\\nThe iterative solution is better as it can handle larger inputs.\"), \"\\n\", React.createElement(_components.h1, null, \"Solution\"), \"\\n\", React.createElement(_components.p, null, \"Recursive\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"from collections import deque\\r\\n# Definition for a binary tree node.\\r\\n# class TreeNode:\\r\\n#     def __init__(self, val=0, left=None, right=None):\\r\\n#         self.val = val\\r\\n#         self.left = left\\r\\n#         self.right = right\\r\\nclass BSTIterator:\\r\\n\\r\\n    def __init__(self, root: Optional[TreeNode]):\\r\\n        self.nodes = deque([])\\r\\n\\r\\n        def traverse(node):\\r\\n            if not node:\\r\\n                return\\r\\n            \\r\\n            traverse(node.left)\\r\\n            self.nodes.append(node.val)\\r\\n            traverse(node.right)\\r\\n        \\r\\n        traverse(root)\\r\\n        \\r\\n\\r\\n    def next(self) -> int:\\r\\n        return self.nodes.popleft()\\r\\n\\r\\n    def hasNext(self) -> bool:\\r\\n        return len(self.nodes) > 0\\r\\n\\r\\n\\r\\n# Your BSTIterator object will be instantiated and called as such:\\r\\n# obj = BSTIterator(root)\\r\\n# param_1 = obj.next()\\r\\n# param_2 = obj.hasNext()\\n\")), \"\\n\", React.createElement(_components.p, null, \"Time complexity is O(n) = n and space complexity is O(h).\"), \"\\n\", React.createElement(_components.p, null, \"iterative\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"from collections import deque\\r\\n# Definition for a binary tree node.\\r\\n# class TreeNode:\\r\\n#     def __init__(self, val=0, left=None, right=None):\\r\\n#         self.val = val\\r\\n#         self.left = left\\r\\n#         self.right = right\\r\\nclass BSTIterator:\\r\\n\\r\\n    def __init__(self, root: Optional[TreeNode]):\\r\\n        self.nodes = []\\r\\n        self.pushAll(root)      \\r\\n\\r\\n    def next(self) -> int:\\r\\n        node = self.nodes.pop()\\r\\n        self.pushAll(node.right)\\r\\n        return node.val\\r\\n\\r\\n    def hasNext(self) -> bool:\\r\\n        return len(self.nodes) > 0\\r\\n    \\r\\n    def pushAll(self, node):\\r\\n        while node:\\r\\n            self.nodes.append(node)\\r\\n            node = node.left\\r\\n\\r\\n\\r\\n\\r\\n# Your BSTIterator object will be instantiated and called as such:\\r\\n# obj = BSTIterator(root)\\r\\n# param_1 = obj.next()\\r\\n# param_2 = obj.hasNext()\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/trill/Development/gatsby-portfolio-with-blog/posts/2024/2024-12-14-leetcode-173/index.mdx\";\nimport {graphql, Link} from 'gatsby';\nimport React from 'react';\nimport Layout from '../components/Layout';\nimport {Heading} from '../components/style.js';\nimport Dump from '../components/Dump';\nimport styled, {ThemeProvider} from 'styled-components';\nimport {theme, Body} from '../components/style';\nimport Navigation from '../components/Navigation';\nimport Footer from '../components/Footer';\nexport const BlogPost = (styled.div)`\n    margin: 0 auto;\n    margin-top: 6em;\n    max-width: 800px;\n    padding: 20px;\n`;\nfunction BlogPostTemplate({data, pageContext, children}) {\n  const {frontmatter} = data.mdx;\n  const {previous, next, post} = pageContext;\n  return React.createElement(Layout, null, React.createElement(ThemeProvider, {\n    theme: theme\n  }, React.createElement(Body, null, React.createElement(Navigation), React.createElement(BlogPost, null, React.createElement(Heading, {\n    className: \"text-center\"\n  }, frontmatter.title), React.createElement(\"p\", {\n    className: \"text-center\"\n  }, post.frontmatter.date), children, previous && React.createElement(React.Fragment, null, previous && React.createElement(Link, {\n    to: previous.fields.slug\n  }, React.createElement(\"p\", null, previous.frontmatter.title))), next && React.createElement(React.Fragment, null, next && React.createElement(Link, {\n    to: next.fields.slug\n  }, React.createElement(\"p\", null, next.frontmatter.title)))), React.createElement(Footer))));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n        query PostsBySlug($slug: String) {\n            mdx(fields: { slug: { eq: $slug } }) {\n                frontmatter {\n                    title\n                }\n            }\n        }\n    `;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h1","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","BlogPost","styled","div","withConfig","displayName","componentId","BlogPostTemplate","_ref","data","pageContext","children","frontmatter","mdx","previous","next","post","Layout","ThemeProvider","theme","Body","Navigation","Heading","title","date","Link","to","fields","slug","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}