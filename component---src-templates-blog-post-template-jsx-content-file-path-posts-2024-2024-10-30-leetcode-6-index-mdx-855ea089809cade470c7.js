"use strict";(self.webpackChunkportfolio_app=self.webpackChunkportfolio_app||[]).push([[9669],{387:function(e,n,t){t.r(n),t.d(n,{BlogPost:function(){return p},default:function(){return g}});var r=t(8453),o=t(6540);function l(e){const n=Object.assign({p:"p",h1:"h1",pre:"pre",code:"code",h2:"h2"},(0,r.R)(),e.components);return o.createElement(o.Fragment,null,o.createElement(n.p,null,"This one took me about 15 minutes to come up with a solution. I then worked through it with this naive solution."),"\n",o.createElement(n.h1,null,"Solution"),"\n",o.createElement(n.pre,null,o.createElement(n.code,{className:"language-python"},"class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        grid = [['' for column in range(len(s))] for row in range(numRows)]\n        x, y = 0, 0\n        direction = 1\n        for char in s:\n            grid[y][x] = char\n            if y == numRows - 1:\n                direction = -1\n                x += 1\n            elif direction == -1 and y > 0:\n                x += 1\n            elif direction == -1 and y == 0:\n                direction = 1\n            y += direction if numRows > 1 else 0\n        result = \"\"\n        for row in grid:\n            for char in row:\n                if char:\n                    result += char\n        return result\n")),"\n",o.createElement(n.p,null,"O(n) = n*m or n^2"),"\n",o.createElement(n.h2,null,"Reflection"),"\n",o.createElement(n.p,null,"Looking back, I realized I didn't need to include the empty spaces as if it were illustrated. This allows me to simplify my code by using the append() method for lists. Here is my improved version:"),"\n",o.createElement(n.pre,null,o.createElement(n.code,{className:"language-python"},"class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        if numRows == 1 or numRows >= len(s):\n            return s\n\n        grid = [[] for _ in range(numRows)]\n        y = 0 \n        direction = 1\n        for char in s:\n            grid[y].append(char)\n            if y == numRows - 1:\n                direction = -1\n            elif y == 0:\n                direction = 1\n            y += direction\n        \n        for i in range(len(grid)):\n            grid[i] = ''.join(grid[i])\n        result = ''.join(grid)\n        return result\n")))}var i=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.R)(),e.components);return n?o.createElement(n,e,o.createElement(l,e)):l(e)},a=t(4810),c=t(4733),s=t(40),m=(t(5147),t(1686)),u=t(9389),d=t(9654);const p=m.default.div.withConfig({displayName:"blogPostTemplate__BlogPost",componentId:"sc-1p2ssye-0"})(["margin:0 auto;margin-top:6em;max-width:800px;padding:20px;"]);function f(e){let{data:n,pageContext:t,children:r}=e;const{frontmatter:l}=n.mdx,{previous:i,next:f,post:g}=t;return o.createElement(c.A,null,o.createElement(m.ThemeProvider,{theme:s.w4},o.createElement(s.nB,null,o.createElement(u.A),o.createElement(p,null,o.createElement(s.DZ,{className:"text-center"},l.title),o.createElement("p",{className:"text-center"},g.frontmatter.date),r,i&&o.createElement(o.Fragment,null,i&&o.createElement(a.N_,{to:i.fields.slug},o.createElement("p",null,i.frontmatter.title))),f&&o.createElement(o.Fragment,null,f&&o.createElement(a.N_,{to:f.fields.slug},o.createElement("p",null,f.frontmatter.title)))),o.createElement(d.A))))}function g(e){return o.createElement(f,e,o.createElement(i,e))}},5147:function(e,n,t){t(6540)}}]);
//# sourceMappingURL=component---src-templates-blog-post-template-jsx-content-file-path-posts-2024-2024-10-30-leetcode-6-index-mdx-855ea089809cade470c7.js.map