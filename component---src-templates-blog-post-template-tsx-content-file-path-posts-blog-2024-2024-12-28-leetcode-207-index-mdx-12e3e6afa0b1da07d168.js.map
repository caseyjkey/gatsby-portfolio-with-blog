{"version":3,"file":"component---src-templates-blog-post-template-tsx-content-file-path-posts-blog-2024-2024-12-28-leetcode-207-index-mdx-12e3e6afa0b1da07d168.js","mappings":"uNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,KAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,obAAqb,KAAMM,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,eAAgB,KAAMK,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CACpqBI,UAAW,mBACV,kvDAAmvD,KAAMD,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,0wBAA2wB,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,2OAA4O,KAAMM,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,qBAAsB,KAAMK,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CACt+FI,UAAW,mBACV,04BACL,CAKA,MAJA,SAAoBX,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,KAAsBR,EAAMS,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWb,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,E,2DCVO,MAAMc,EAAWC,EAAAA,QAAOC,IAAIC,WAAW,CAC5CC,YAAa,6BACbC,YAAa,eAFSJ,CAGrB,CAAC,+DACJ,SAASK,EAAiBC,GACxB,IAAI,KAACC,EAAI,YAAEC,EAAW,SAAEC,GAAYH,EACpC,MAAM,YAACI,GAAeH,EAAKI,KACrB,SAACC,EAAQ,KAAEC,EAAI,KAAEC,GAAQN,EAC/B,OAAOb,EAAAA,cAAoBoB,EAAAA,EAAQ,KAAMpB,EAAAA,cAAoBqB,EAAAA,cAAe,CAC1EC,MAAOA,EAAAA,IACNtB,EAAAA,cAAoBuB,EAAAA,GAAM,KAAMvB,EAAAA,cAAoBwB,EAAAA,EAAY,MAAOxB,EAAAA,cAAoBI,EAAU,KAAMJ,EAAAA,cAAoByB,EAAAA,GAAS,CACzIxB,UAAW,eACVc,EAAYW,OAAQ1B,EAAAA,cAAoB,IAAK,CAC9CC,UAAW,eACVkB,EAAKJ,YAAYY,MAAOb,EAAUG,GAAYjB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMiB,GAAYjB,EAAAA,cAAoB4B,EAAAA,GAAM,CAC/HC,GAAIZ,EAASa,OAAOC,MACnB/B,EAAAA,cAAoB,IAAK,KAAMiB,EAASF,YAAYW,SAAUR,GAAQlB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMkB,GAAQlB,EAAAA,cAAoB4B,EAAAA,GAAM,CACnJC,GAAIX,EAAKY,OAAOC,MACf/B,EAAAA,cAAoB,IAAK,KAAMkB,EAAKH,YAAYW,UAAW1B,EAAAA,cAAoBgC,EAAAA,EAAQ,QAC5F,CACe,SAASC,EAAiB3C,GACvC,OAAOU,EAAAA,cAAoBU,EAAkBpB,EAAOU,EAAAA,cAAoBkC,EAAqB5C,GAC/F,C","sources":["webpack://portfolio-app/./posts/blog/2024/2024-12-28-leetcode-207/index.mdx","webpack://portfolio-app/./src/templates/blogPostTemplate.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Today I worked on a general graph problem. My initial solution was much more verbose and less readable than\\r\\nanother coder's solution. However, I feel like during an interview I would have been able to derive\\r\\nthe simpler solution through asking questions, such as whether any course number will exceed the numCourses variable.\\r\\nI also need to be more mindful of what data I need to track or else I create unnecessary classes.\"), \"\\n\", React.createElement(_components.h1, null, \"My Solution\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"class Node:\\r\\n    def __init__(self, val: int, toNodes: List['Node'] = None, fromNodes: List['Node'] = None):\\r\\n        self.val = val\\r\\n        self.toNodes = toNodes if toNodes is not None else []\\r\\n        self.fromNodes = fromNodes if fromNodes is not None else []\\r\\n\\r\\nclass Solution:\\r\\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\\r\\n        if not prerequisites:\\r\\n            return True\\r\\n\\r\\n        nodes = {}\\r\\n        for after, before in prerequisites:\\r\\n            if after not in nodes:\\r\\n                nodes[after] = Node(after)\\r\\n            afterNode = nodes[after]\\r\\n\\r\\n            if before not in nodes:\\r\\n                nodes[before] = Node(before)\\r\\n            beforeNode = nodes[before]\\r\\n            beforeNode.toNodes.append(afterNode)\\r\\n            afterNode.fromNodes.append(beforeNode)\\r\\n        \\r\\n        topological_order = []\\r\\n        stack = set()\\r\\n        visited = set()\\r\\n        has_cycle = False\\r\\n        def dfs(node):\\r\\n            nonlocal has_cycle\\r\\n            if node in stack:\\r\\n                return False\\r\\n            if node in visited:\\r\\n                return True\\r\\n            \\r\\n            stack.add(node)\\r\\n            print(node.val)\\r\\n            for child in node.toNodes:\\r\\n                if not dfs(child):\\r\\n                    has_cycle = True\\r\\n            stack.remove(node)\\r\\n            visited.add(node)\\r\\n            topological_order.append(node.val)\\r\\n            return True\\r\\n        \\r\\n        for node in nodes.values():\\r\\n            #if not node.fromNodes:\\r\\n            dfs(node)\\r\\n            if has_cycle:\\r\\n                return False\\r\\n\\r\\n        return len(topological_order) <= numCourses\\n\")), \"\\n\", React.createElement(_components.p, null, \"The time complexity is O(M + N) where M are the number of nodes and N are the number of edges, as each are visited once. The space complexity is the same as it grows linearly with the input size.\\r\\nI used a class to build a directed graph which I could use to attempt a topological sort,\\r\\nthis sort would allow me to check if there are less courses than numCourses and also detect cycles.\\r\\nHowever, the problem states numCourses is always less than the course numbers, we could instead\\r\\ncheck each course if we may satisfy it's given prerequisites up to numCourses.\\r\\nBy default, we can say a course doesn't have any prerequisites. Therefor, we only\\r\\nneed to check if there is ever a cycle, which we can detect using a set that tracks\\r\\nwhich courses we've taken.\"), \"\\n\", React.createElement(_components.p, null, \"If we can go through every course up to numCourses without visiting a taken class,\\r\\nwe can return true. The topological order is unnecessary, however, it is given that\\r\\na topological order exists if we can complete the courses.\"), \"\\n\", React.createElement(_components.h1, null, \"Improved Solution\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"class Solution:\\r\\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\\r\\n        from collections import defaultdict\\r\\n\\r\\n        pres = defaultdict(list)\\r\\n        for course, pre in prerequisites:\\r\\n            pres[course].append(pre)\\r\\n        \\r\\n        taken = set()\\r\\n        def dfs(course):\\r\\n            if not pres[course]:\\r\\n                return True\\r\\n            \\r\\n            if course in taken:\\r\\n                return False # Cycle detected\\r\\n            \\r\\n            taken.add(course)\\r\\n            for pre in pres[course]:\\r\\n                if not dfs(pre):\\r\\n                    return False\\r\\n            \\r\\n            pres[course] = []\\r\\n            return True\\r\\n        \\r\\n        for course in range(numCourses):\\r\\n            if not dfs(course):\\r\\n                return False\\r\\n        \\r\\n        return True\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/trill/Development/gatsby-portfolio-with-blog/posts/blog/2024/2024-12-28-leetcode-207/index.mdx\";\nimport {Link} from 'gatsby';\nimport React from 'react';\nimport Layout from '../components/Layout';\nimport {Heading} from '../components/style.ts';\nimport styled, {ThemeProvider} from 'styled-components';\nimport {theme, Body} from '../components/style';\nimport Navigation from '../components/Navigation';\nimport Footer from '../components/Footer';\nexport const BlogPost = styled.div.withConfig({\n  displayName: \"blogPostTemplate__BlogPost\",\n  componentId: \"sc-6bdelx-0\"\n})([\"margin:0 auto;margin-top:6em;max-width:800px;padding:20px;\"]);\nfunction BlogPostTemplate(_ref) {\n  let {data, pageContext, children} = _ref;\n  const {frontmatter} = data.mdx;\n  const {previous, next, post} = pageContext;\n  return React.createElement(Layout, null, React.createElement(ThemeProvider, {\n    theme: theme\n  }, React.createElement(Body, null, React.createElement(Navigation, null), React.createElement(BlogPost, null, React.createElement(Heading, {\n    className: \"text-center\"\n  }, frontmatter.title), React.createElement(\"p\", {\n    className: \"text-center\"\n  }, post.frontmatter.date), children, previous && React.createElement(React.Fragment, null, previous && React.createElement(Link, {\n    to: previous.fields.slug\n  }, React.createElement(\"p\", null, previous.frontmatter.title))), next && React.createElement(React.Fragment, null, next && React.createElement(Link, {\n    to: next.fields.slug\n  }, React.createElement(\"p\", null, next.frontmatter.title)))), React.createElement(Footer, null))));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst query = \"3188270682\";\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h1","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","BlogPost","styled","div","withConfig","displayName","componentId","BlogPostTemplate","_ref","data","pageContext","children","frontmatter","mdx","previous","next","post","Layout","ThemeProvider","theme","Body","Navigation","Heading","title","date","Link","to","fields","slug","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}