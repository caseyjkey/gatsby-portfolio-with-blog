{"version":3,"file":"component---src-templates-blog-post-template-jsx-content-file-path-posts-2024-2024-11-02-leetcode-30-index-mdx-6888da75491a50b294f4.js","mappings":"uNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,KAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,uCAAwC,KAAMM,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,YAAa,KAAMK,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CACpRI,UAAW,mBACV,ujBAAwjB,KAAMD,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,kGAAmG,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,yCAA0CM,EAAAA,cAAoBT,EAAYM,KAAM,KAAM,0BAA2B,yKAA0KG,EAAAA,cAAoBT,EAAYM,KAAM,KAAM,SAAU,6BAA8BG,EAAAA,cAAoBT,EAAYM,KAAM,KAAM,6BAA8B,oSAAqSG,EAAAA,cAAoBT,EAAYM,KAAM,KAAM,kBAAmB,OAAQG,EAAAA,cAAoBT,EAAYM,KAAM,KAAM,oBAAqB,4CAA6C,KAAMG,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CACpuDI,UAAW,mBACV,m7CACL,CAKA,MAJA,SAAoBX,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,KAAsBR,EAAMS,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWb,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oECTO,MAAMc,EAAYC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,6BAAAC,YAAA,gBAAVJ,CAAU,gEAMnC,SAASK,EAAgBC,GAAgC,IAA/B,KAACC,EAAI,YAAEC,EAAW,SAAEC,GAASH,EACrD,MAAM,YAACI,GAAeH,EAAKI,KACrB,SAACC,EAAQ,KAAEC,EAAI,KAAEC,GAAQN,EAC/B,OAAOb,EAAAA,cAAoBoB,EAAAA,EAAQ,KAAMpB,EAAAA,cAAoBqB,EAAAA,cAAe,CAC1EC,MAAOA,EAAAA,IACNtB,EAAAA,cAAoBuB,EAAAA,GAAM,KAAMvB,EAAAA,cAAoBwB,EAAAA,GAAaxB,EAAAA,cAAoBI,EAAU,KAAMJ,EAAAA,cAAoByB,EAAAA,GAAS,CACnIxB,UAAW,eACVc,EAAYW,OAAQ1B,EAAAA,cAAoB,IAAK,CAC9CC,UAAW,eACVkB,EAAKJ,YAAYY,MAAOb,EAAUG,GAAYjB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMiB,GAAYjB,EAAAA,cAAoB4B,EAAAA,GAAM,CAC/HC,GAAIZ,EAASa,OAAOC,MACnB/B,EAAAA,cAAoB,IAAK,KAAMiB,EAASF,YAAYW,SAAUR,GAAQlB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMkB,GAAQlB,EAAAA,cAAoB4B,EAAAA,GAAM,CACnJC,GAAIX,EAAKY,OAAOC,MACf/B,EAAAA,cAAoB,IAAK,KAAMkB,EAAKH,YAAYW,UAAW1B,EAAAA,cAAoBgC,EAAAA,KACpF,CACe,SAASC,EAAiB3C,GACvC,OAAOU,EAAAA,cAAoBU,EAAkBpB,EAAOU,EAAAA,cAAoBkC,EAAqB5C,GAC/F,C","sources":["webpack://portfolio-app/./posts/2024/2024-11-02-leetcode-30/index.mdx","webpack://portfolio-app/./src/templates/blogPostTemplate.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Starting with a hard problem today.\"), \"\\n\", React.createElement(_components.h1, null, \"Solution\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"class Solution:\\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\\n        lenTotal = len(''.join(words))\\n        perms = set()\\n        def permutations(head, tail):\\n            if not len(head):\\n                perms.add(tail)\\n            for i in range(len(head)):\\n                permutations(head[:i] + head[i+1:], tail + head[i])\\n        permutations(words, '')\\n\\n        result = []\\n        for i in range(0, len(s)):\\n            if s[i:i+lenTotal] in perms:\\n                result.append(i)\\n        \\n        return result\\n\")), \"\\n\", React.createElement(_components.p, null, \"This solution times out. It has a time complexity of O(n) = n! due to the permutations method.\"), \"\\n\", React.createElement(_components.p, null, \"I'm going to try again using python's \", React.createElement(_components.code, null, \"itertools.permutations\"), \" method. However, this lead to an out of memory error.\\nRethinking the algorithm, we can remove the step where we find all permutations. Instead, we will replace our \", React.createElement(_components.code, null, \"perms\"), \" set with a method called \", React.createElement(_components.code, null, \"validSubstring(substring)\"), \". This method will use a copy of the list of words, and we will loop through the substring and remove any word occurrences. If we always find a word at each step in our substring, we return True. We improve the efficiency of our algorithm by caching the result of each substring as either \", React.createElement(_components.code, null, \"validSubstring\"), \" or \", React.createElement(_components.code, null, \"invalidSubstring\"), \" set members. This solution is accepted.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"import itertools\\n\\nclass Solution:\\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\\n        if len(s) < len(''.join(words)):\\n            return []\\n\\n        wordLen = len(words[0])\\n        def validSubstring(substring):\\n            wordsTemp = words[:]\\n            for i in range(0, len(substring), wordLen):\\n                currWord = substring[i:i + wordLen]\\n                if currWord in wordsTemp:\\n                    wordsTemp.remove(currWord)\\n                else:\\n                    return False\\n            return True\\n        \\n        invalidSubstrings = set()\\n        validSubstrings = set()\\n        wordsLen = wordLen * len(words)\\n        window = s[:wordsLen]\\n        res = []\\n        if validSubstring(window):\\n            validSubstrings.add(window)\\n            res.append(0)\\n\\n        for i in range(wordsLen, len(s)):\\n            letter = s[i]\\n            window = window[1:]\\n            window += letter\\n            if window not in invalidSubstrings:\\n                if window in validSubstrings or validSubstring(window):\\n                    res.append(i - wordsLen + 1)\\n                    validSubstrings.add(window)\\n                else:\\n                    invalidSubstrings.add(window)\\n        \\n        return res\\n```\\nThe time complexity is O(n) = n * k^2 where k is the number of words. It is k^2 because we loop through k words and the remove operation is O(k) = k. \\n\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/trill/Development/gatsby-portfolio-with-blog/posts/2024/2024-11-02-leetcode-30/index.mdx\";\nimport {graphql, Link} from 'gatsby';\nimport React from 'react';\nimport Layout from '../components/Layout';\nimport {Heading} from '../components/style.js';\nimport Dump from '../components/Dump';\nimport styled, {ThemeProvider} from 'styled-components';\nimport {theme, Body} from '../components/style';\nimport Navigation from '../components/Navigation';\nimport Footer from '../components/Footer';\nexport const BlogPost = (styled.div)`\n    margin: 0 auto;\n    margin-top: 6em;\n    max-width: 800px;\n    padding: 20px;\n`;\nfunction BlogPostTemplate({data, pageContext, children}) {\n  const {frontmatter} = data.mdx;\n  const {previous, next, post} = pageContext;\n  return React.createElement(Layout, null, React.createElement(ThemeProvider, {\n    theme: theme\n  }, React.createElement(Body, null, React.createElement(Navigation), React.createElement(BlogPost, null, React.createElement(Heading, {\n    className: \"text-center\"\n  }, frontmatter.title), React.createElement(\"p\", {\n    className: \"text-center\"\n  }, post.frontmatter.date), children, previous && React.createElement(React.Fragment, null, previous && React.createElement(Link, {\n    to: previous.fields.slug\n  }, React.createElement(\"p\", null, previous.frontmatter.title))), next && React.createElement(React.Fragment, null, next && React.createElement(Link, {\n    to: next.fields.slug\n  }, React.createElement(\"p\", null, next.frontmatter.title)))), React.createElement(Footer))));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n        query PostsBySlug($slug: String) {\n            mdx(fields: { slug: { eq: $slug } }) {\n                frontmatter {\n                    title\n                }\n            }\n        }\n    `;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h1","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","BlogPost","styled","div","withConfig","displayName","componentId","BlogPostTemplate","_ref","data","pageContext","children","frontmatter","mdx","previous","next","post","Layout","ThemeProvider","theme","Body","Navigation","Heading","title","date","Link","to","fields","slug","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}