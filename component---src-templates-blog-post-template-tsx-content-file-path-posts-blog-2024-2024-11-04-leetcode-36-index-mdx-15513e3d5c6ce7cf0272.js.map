{"version":3,"file":"component---src-templates-blog-post-template-tsx-content-file-path-posts-blog-2024-2024-11-04-leetcode-36-index-mdx-15513e3d5c6ce7cf0272.js","mappings":"oNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,IAAK,MACLC,KAAM,OACNC,GAAI,OACHC,EAAAA,EAAAA,KAAsBT,EAAMU,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,yCAA0C,KAAMO,EAAAA,cAAoBV,EAAYI,GAAI,KAAM,YAAa,KAAMM,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,uCAAwC,KAAMO,EAAAA,cAAoBV,EAAYK,IAAK,KAAMK,EAAAA,cAAoBV,EAAYM,KAAM,CAC7WK,UAAW,mBACV,89BAA+9B,KAAMD,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,gBAAiB,KAAMG,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,gHAAiH,KAAMO,EAAAA,cAAoBV,EAAYK,IAAK,KAAMK,EAAAA,cAAoBV,EAAYM,KAAM,CACxxCK,UAAW,mBACV,sUAAuU,KAAMD,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,oMAC3X,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,KAAsBT,EAAMU,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWd,EAAOW,EAAAA,cAAoBZ,EAAmBC,IAAUD,EAAkBC,EAC9H,E,2DCXO,MAAMe,EAAWC,EAAAA,QAAOC,IAAIC,WAAW,CAC5CC,YAAa,6BACbC,YAAa,eAFSJ,CAGrB,CAAC,+DACJ,SAASK,EAAiBC,GACxB,IAAI,KAACC,EAAI,YAAEC,EAAW,SAAEC,GAAYH,EACpC,MAAM,YAACI,GAAeH,EAAKI,KACrB,SAACC,EAAQ,KAAEC,EAAI,KAAEC,GAAQN,EAC/B,OAAOb,EAAAA,cAAoBoB,EAAAA,EAAQ,KAAMpB,EAAAA,cAAoBqB,EAAAA,cAAe,CAC1EC,MAAOA,EAAAA,IACNtB,EAAAA,cAAoBuB,EAAAA,GAAM,KAAMvB,EAAAA,cAAoBwB,EAAAA,EAAY,MAAOxB,EAAAA,cAAoBI,EAAU,KAAMJ,EAAAA,cAAoByB,EAAAA,GAAS,CACzIxB,UAAW,eACVc,EAAYW,OAAQ1B,EAAAA,cAAoB,IAAK,CAC9CC,UAAW,eACVkB,EAAKJ,YAAYY,MAAOb,EAAUG,GAAYjB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMiB,GAAYjB,EAAAA,cAAoB4B,EAAAA,GAAM,CAC/HC,GAAIZ,EAASa,OAAOC,MACnB/B,EAAAA,cAAoB,IAAK,KAAMiB,EAASF,YAAYW,SAAUR,GAAQlB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMkB,GAAQlB,EAAAA,cAAoB4B,EAAAA,GAAM,CACnJC,GAAIX,EAAKY,OAAOC,MACf/B,EAAAA,cAAoB,IAAK,KAAMkB,EAAKH,YAAYW,UAAW1B,EAAAA,cAAoBgC,EAAAA,EAAQ,QAC5F,CACe,SAASC,EAAiB5C,GACvC,OAAOW,EAAAA,cAAoBU,EAAkBrB,EAAOW,EAAAA,cAAoBkC,EAAqB7C,GAC/F,C","sources":["webpack://portfolio-app/./posts/blog/2024/2024-11-04-leetcode-36/index.mdx","webpack://portfolio-app/./src/templates/blogPostTemplate.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Now, I am working on matrix problems.\"), \"\\n\", React.createElement(_components.h1, null, \"Solution\"), \"\\n\", React.createElement(_components.p, null, \"This is my initial greedy solution.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"class Solution:\\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\\n        for row in board:\\n            rowVals = set()\\n            for column in row:\\n                if column != '.' and column in rowVals:\\n                    return False\\n                rowVals.add(column)\\n\\n        for col in range(len(board[0])):\\n            colVals = set()\\n            for row in board:\\n                if row[col] != '.' and row[col] in colVals:\\n                    return False\\n                colVals.add(row[col])\\n\\n        for subX in range(3):\\n            for subY in range(3):\\n                gridVals = set()\\n                for x in range(3):\\n                    for y in range(3):\\n                        cell = board[subY * 3 + y][subX * 3 + x]\\n                        if cell != '.' and cell in gridVals:\\n                            return False\\n                        gridVals.add(board[subY * 3 + y][subX * 3 + x])\\n        \\n        return True\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Improvements\"), \"\\n\", React.createElement(_components.p, null, \"Now, I reviewed other solutions and liked this one which uses a list of tuples and only one nested for loop.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"class Solution:\\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\\n        vals = []\\n        for i, row in enumerate(board):\\n            for j, x in enumerate(row):\\n                if x != '.':\\n                    vals += [(x, j), (i, x), (x, i // 3, j // 3)]\\n        return len(vals) == len(set(vals))\\n\")), \"\\n\", React.createElement(_components.p, null, \"I like how tuples are made unique by swapping their position, and the cell value is not mistaken for the row/column because it is a string rather than int.\\nO(n) = 1 since board size is fixed.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/trill/Development/gatsby-portfolio-with-blog/posts/blog/2024/2024-11-04-leetcode-36/index.mdx\";\nimport {Link} from 'gatsby';\nimport React from 'react';\nimport Layout from '../components/Layout';\nimport {Heading} from '../components/style.ts';\nimport styled, {ThemeProvider} from 'styled-components';\nimport {theme, Body} from '../components/style';\nimport Navigation from '../components/Navigation';\nimport Footer from '../components/Footer';\nexport const BlogPost = styled.div.withConfig({\n  displayName: \"blogPostTemplate__BlogPost\",\n  componentId: \"sc-6bdelx-0\"\n})([\"margin:0 auto;margin-top:6em;max-width:800px;padding:20px;\"]);\nfunction BlogPostTemplate(_ref) {\n  let {data, pageContext, children} = _ref;\n  const {frontmatter} = data.mdx;\n  const {previous, next, post} = pageContext;\n  return React.createElement(Layout, null, React.createElement(ThemeProvider, {\n    theme: theme\n  }, React.createElement(Body, null, React.createElement(Navigation, null), React.createElement(BlogPost, null, React.createElement(Heading, {\n    className: \"text-center\"\n  }, frontmatter.title), React.createElement(\"p\", {\n    className: \"text-center\"\n  }, post.frontmatter.date), children, previous && React.createElement(React.Fragment, null, previous && React.createElement(Link, {\n    to: previous.fields.slug\n  }, React.createElement(\"p\", null, previous.frontmatter.title))), next && React.createElement(React.Fragment, null, next && React.createElement(Link, {\n    to: next.fields.slug\n  }, React.createElement(\"p\", null, next.frontmatter.title)))), React.createElement(Footer, null))));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst query = \"3188270682\";\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h1","pre","code","h2","_provideComponents","components","React","className","wrapper","MDXLayout","BlogPost","styled","div","withConfig","displayName","componentId","BlogPostTemplate","_ref","data","pageContext","children","frontmatter","mdx","previous","next","post","Layout","ThemeProvider","theme","Body","Navigation","Heading","title","date","Link","to","fields","slug","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}