"use strict";(self.webpackChunkportfolio_app=self.webpackChunkportfolio_app||[]).push([[8735],{3697:function(e,n,t){t.r(n),t.d(n,{BlogPost:function(){return f},default:function(){return g}});var r=t(8453),l=t(6540);function o(e){const n=Object.assign({p:"p",h1:"h1",pre:"pre",code:"code"},(0,r.R)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.p,null,"I am glad I was able to make a solution from my own intuition."),"\n",l.createElement(n.h1,null,"Solution"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-python"},"from collections import deque\r\n# Definition for a binary tree node.\r\n# class TreeNode:\r\n#     def __init__(self, val=0, left=None, right=None):\r\n#         self.val = val\r\n#         self.left = left\r\n#         self.right = right\r\nclass Solution:\r\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\r\n        nodes = deque([root] if root else [])\r\n        rightToLeft = False\r\n\r\n        result = []\r\n        while nodes:\r\n            level = []\r\n            children = deque([])\r\n            for i in range(len(nodes)):\r\n                if rightToLeft:\r\n                    node = nodes.pop()\r\n                    node.right and children.appendleft(node.right)\r\n                    node.left and children.appendleft(node.left)\r\n                else:\r\n                    node = nodes.popleft()\r\n                    node.left and children.append(node.left)\r\n                    node.right and children.append(node.right)\r\n                level.append(node.val)\r\n            result.append(level)\r\n            if rightToLeft:\r\n                nodes += children\r\n            else:\r\n                nodes = children + nodes\r\n            rightToLeft = not rightToLeft\r\n        return result\n")),"\n",l.createElement(n.p,null,"Time complexity is O(n) = n and space complexity is O(n)."))}var a=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.R)(),e.components);return n?l.createElement(n,e,l.createElement(o,e)):o(e)},i=t(4810),c=t(4733),d=t(40),s=(t(5147),t(1686)),p=t(9389),m=t(9654);const f=s.default.div.withConfig({displayName:"blogPostTemplate__BlogPost",componentId:"sc-1p2ssye-0"})(["margin:0 auto;margin-top:6em;max-width:800px;padding:20px;"]);function u(e){let{data:n,pageContext:t,children:r}=e;const{frontmatter:o}=n.mdx,{previous:a,next:u,post:g}=t;return l.createElement(c.A,null,l.createElement(s.ThemeProvider,{theme:d.w4},l.createElement(d.nB,null,l.createElement(p.A),l.createElement(f,null,l.createElement(d.DZ,{className:"text-center"},o.title),l.createElement("p",{className:"text-center"},g.frontmatter.date),r,a&&l.createElement(l.Fragment,null,a&&l.createElement(i.N_,{to:a.fields.slug},l.createElement("p",null,a.frontmatter.title))),u&&l.createElement(l.Fragment,null,u&&l.createElement(i.N_,{to:u.fields.slug},l.createElement("p",null,u.frontmatter.title)))),l.createElement(m.A))))}function g(e){return l.createElement(u,e,l.createElement(a,e))}},5147:function(e,n,t){t(6540)}}]);
//# sourceMappingURL=component---src-templates-blog-post-template-jsx-content-file-path-posts-2024-2024-12-12-leetcode-103-index-mdx-8e484f2f6314240d601a.js.map