"use strict";(self.webpackChunkportfolio_app=self.webpackChunkportfolio_app||[]).push([[1574],{1784:function(e,n,t){t.r(n),t.d(n,{BlogPost:function(){return p},default:function(){return f}});var l=t(8453),r=t(6540);function a(e){const n=Object.assign({h1:"h1",p:"p",h2:"h2",strong:"strong",ul:"ul",li:"li",pre:"pre",code:"code"},(0,l.R)(),e.components);return r.createElement(r.Fragment,null,r.createElement(n.h1,null,"190. Reverse Bits"),"\n",r.createElement(n.p,null,"Today is another easy problem, and it is focused on bit manipulation.\r\nLet's dive on in."),"\n",r.createElement(n.h2,null,"The Problem"),"\n",r.createElement(n.p,null,"Today's problem is ",r.createElement(n.strong,null,"190. Reverse Bits"),". The problem is as follows:\r\nReverse bits of a given 32 bits unsigned integer."),"\n",r.createElement(n.h2,null,"The Solution"),"\n",r.createElement(n.p,null,"I like to format my answers using the UMPIRE method:"),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"Understand","\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"We are given a 32-bit unsigned integer, and we are to reverse the bits."),"\n"),"\n"),"\n",r.createElement(n.li,null,"Match","\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"We can match this problem to a bit manipulation problem."),"\n"),"\n"),"\n",r.createElement(n.li,null,"Plan","\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"We can write a function which casts the number to binary, then a string, and finally reverses it before casting back to binary."),"\n"),"\n"),"\n",r.createElement(n.li,null,"Implement"),"\n"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-python"},"    def reverseBits(self, n: int) -> int:\r\n        b = bin(n)\r\n        s = str(b)[2:].zfill(32)\r\n        s = s[::-1]\r\n        return int(s, 2) \n")),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"Review","\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"The code is clean and concise. We used descriptive variable names. We have implemented a bit manipulation."),"\n",r.createElement(n.li,null,"We can test our code using the examples provided."),"\n",r.createElement(n.li,null,"n = 43261596","\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"b = '0b10100101000001111010011100'"),"\n",r.createElement(n.li,null,"s = '00000010100101000001111010011100'"),"\n",r.createElement(n.li,null,"s = '00111001011110000010100101000000'"),"\n"),"\n"),"\n"),"\n"),"\n"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-python"},"    def test_reverseBits(self):\r\n        assert self.reverseBits(43261596) == 964176192\r\n        assert self.reverseBits(4294967293) == 3221225471\n")),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"Evaluate","\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"Our code runs in O(n) time complexity due to our list slicing."),"\n",r.createElement(n.li,null,"Our space complexity is O(1) as we use the same amount of space regardless of input size."),"\n"),"\n"),"\n"))}var i=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.R)(),e.components);return n?r.createElement(n,e,r.createElement(a,e)):a(e)},s=t(4810),c=t(4399),m=t(3614),u=t(1510),o=t(6409),E=t(572);const p=u.default.div.withConfig({displayName:"blogPostTemplate__BlogPost",componentId:"sc-6bdelx-0"})(["margin:0 auto;margin-top:6em;max-width:800px;padding:20px;"]);function d(e){let{data:n,pageContext:t,children:l}=e;const{frontmatter:a}=n.mdx,{previous:i,next:d,post:f}=t;return r.createElement(c.A,null,r.createElement(u.ThemeProvider,{theme:m.w4},r.createElement(m.nB,null,r.createElement(o.A,null),r.createElement(p,null,r.createElement(m.DZ,{className:"text-center"},a.title),r.createElement("p",{className:"text-center"},f.frontmatter.date),l,i&&r.createElement(r.Fragment,null,i&&r.createElement(s.N_,{to:i.fields.slug},r.createElement("p",null,i.frontmatter.title))),d&&r.createElement(r.Fragment,null,d&&r.createElement(s.N_,{to:d.fields.slug},r.createElement("p",null,d.frontmatter.title)))),r.createElement(E.A,null))))}function f(e){return r.createElement(d,e,r.createElement(i,e))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-template-tsx-content-file-path-posts-2024-2024-10-04-second-leetcode-index-mdx-984be3be449224d2463d.js.map