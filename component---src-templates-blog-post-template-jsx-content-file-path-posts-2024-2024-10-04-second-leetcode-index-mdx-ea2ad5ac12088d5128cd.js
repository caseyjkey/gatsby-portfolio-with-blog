"use strict";(self.webpackChunkportfolio_app=self.webpackChunkportfolio_app||[]).push([[848],{1508:function(e,n,t){t.r(n),t.d(n,{BlogPost:function(){return f},default:function(){return g}});var l=t(5276),r=t(8453),a=t(6540);function i(e){const n=Object.assign({h1:"h1",p:"p",h2:"h2",strong:"strong",ul:"ul",li:"li",pre:"pre",code:"code"},(0,r.R)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.h1,null,"Second LeetCode Blog Post"),"\n",a.createElement(n.p,null,"Today is another easy problem, and it is focused on bit manipulation.\r\nLet's dive on in."),"\n",a.createElement(n.h2,null,"The Problem"),"\n",a.createElement(n.p,null,"Today's problem is ",a.createElement(n.strong,null,"190. Reverse Bits"),". The problem is as follows:\r\nReverse bits of a given 32 bits unsigned integer."),"\n",a.createElement(n.h2,null,"The Solution"),"\n",a.createElement(n.p,null,"I like to format my answers using the UMPIRE method:"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"Understand","\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"We are given a 32-bit unsigned integer, and we are to reverse the bits."),"\n"),"\n"),"\n",a.createElement(n.li,null,"Match","\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"We can match this problem to a bit manipulation problem."),"\n"),"\n"),"\n",a.createElement(n.li,null,"Plan","\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"We can write a function which casts the number to binary, then a string, and finally reverses it before casting back to binary."),"\n"),"\n"),"\n",a.createElement(n.li,null,"Implement"),"\n"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"    def reverseBits(self, n: int) -> int:\r\n        b = bin(n)\r\n        s = str(b)[2:].zfill(32)\r\n        s = s[::-1]\r\n        return int(s, 2) \n")),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"Review","\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"The code is clean and concise. We used descriptive variable names. We have implemented a bit manipulation."),"\n",a.createElement(n.li,null,"We can test our code using the examples provided."),"\n",a.createElement(n.li,null,"n = 43261596","\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"b = '0b10100101000001111010011100'"),"\n",a.createElement(n.li,null,"s = '00000010100101000001111010011100'"),"\n",a.createElement(n.li,null,"s = '00111001011110000010100101000000'"),"\n"),"\n"),"\n"),"\n"),"\n"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"    def test_reverseBits(self):\r\n        assert self.reverseBits(43261596) == 964176192\r\n        assert self.reverseBits(4294967293) == 3221225471\n")),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"Evaluate","\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"Our code runs in O(n) time complexity due to our list slicing."),"\n",a.createElement(n.li,null,"Our space complexity is O(1) as we use the same amount of space regardless of input size."),"\n"),"\n"),"\n"))}var c,s=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.R)(),e.components);return n?a.createElement(n,e,a.createElement(i,e)):i(e)},u=t(4810),m=t(4733),o=t(40),E=(t(5147),t(2240)),p=t(9389),d=t(9654);const f=E.Ay.div(c||(c=(0,l.A)(["\n    margin: 0 auto;\n    margin-top: 6em;\n    max-width: 800px;\n    padding: 20px;\n"])));function h(e){let{data:n,pageContext:t,children:l}=e;const{frontmatter:r}=n.mdx,{previous:i,next:c,post:s}=t;return a.createElement(m.A,null,a.createElement(E.NP,{theme:o.w4},a.createElement(o.nB,null,a.createElement(p.A),a.createElement(f,null,a.createElement(o.DZ,{className:"text-center"},r.title),a.createElement("p",{className:"text-center"},s.frontmatter.date),l,i&&a.createElement(a.Fragment,null,i&&a.createElement(u.N_,{to:i.fields.slug},a.createElement("p",null,i.frontmatter.title))),c&&a.createElement(a.Fragment,null,c&&a.createElement(u.N_,{to:c.fields.slug},a.createElement("p",null,c.frontmatter.title)))),a.createElement(d.A))))}function g(e){return a.createElement(h,e,a.createElement(s,e))}},5147:function(e,n,t){t(6540)}}]);
//# sourceMappingURL=component---src-templates-blog-post-template-jsx-content-file-path-posts-2024-2024-10-04-second-leetcode-index-mdx-ea2ad5ac12088d5128cd.js.map