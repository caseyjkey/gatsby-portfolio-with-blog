{"version":3,"file":"component---src-templates-blog-post-template-js-35748ddaa33e5d65f709.js","mappings":"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","sources":["webpack://portfolio-app/./node_modules/@mdx-js/react/lib/index.js","webpack://portfolio-app/./src/components/Dump.js","webpack://portfolio-app/./src/templates/blogPostTemplate.js"],"sourcesContent":["import _defineProperty from \"C:/Users/casey/OneDrive/Documents/GitHub/gatsby-portfolio-with-blog/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react';\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means itâ€™s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport var MDXContext = React.createContext({});\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means itâ€™s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent;\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    var allComponents = useMDXComponents(props.components);\n    return React.createElement(Component, _objectSpread(_objectSpread({}, props), {}, {\n      allComponents: allComponents\n    }));\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  var contextComponents = React.useContext(MDXContext);\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(function () {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents);\n    }\n    return _objectSpread(_objectSpread({}, contextComponents), components);\n  }, [contextComponents, components]);\n}\n\n/** @type {Components} */\nvar emptyObject = {};\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider(_ref) {\n  var components = _ref.components,\n    children = _ref.children,\n    disableParentContext = _ref.disableParentContext;\n  var allComponents = useMDXComponents(components);\n  if (disableParentContext) {\n    allComponents = components || emptyObject;\n  }\n  return React.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, children);\n}","import React from 'react'\r\n\r\nconst Dump = props => (\r\n  <div\r\n    style={{\r\n      fontSize: 20,\r\n      border: '1px solid #efefef',\r\n      padding: 10,\r\n      background: 'white',\r\n    }}\r\n  >\r\n    {Object.entries(props).map(([key, val]) => (\r\n      <pre key={key}>\r\n        <strong style={{ color: 'white', background: 'red' }}>\r\n          {key} ðŸ’©\r\n        </strong>\r\n        {JSON.stringify(val, '', ' ')}\r\n      </pre>\r\n    ))}\r\n  </div>\r\n)\r\n\r\nexport default Dump","import { graphql, Link } from 'gatsby'\r\nimport { MDXProvider } from '@mdx-js/react'\r\nimport React from 'react'\r\nimport Layout from '../components/Layout'\r\nimport Dump from '../components/Dump'\r\n\r\nexport default function blogPostTemplate({ data, pageContext, children }) {\r\n    \r\n    \r\n    /*\r\n    return (\r\n        <>\r\n            <Dump query={query.mdx} />\r\n            <Dump data={data} />\r\n            <Dump pageContext={pageContext} />\r\n        </>\r\n    ); */\r\n    const { frontmatter, body } = data.mdx; // data is from the exported graphql query below\r\n    const { previous, next, post } = pageContext;\r\n    \r\n    return (\r\n        <Layout>\r\n            <Dump previous={previous} />\r\n            <Dump next={next} />\r\n            <h1>{frontmatter.title}</h1>\r\n            <p>{frontmatter.date}</p>\r\n            <MDXProvider>{children}</MDXProvider>\r\n            {previous === false ? null : (\r\n                <>\r\n                    {previous && (\r\n                        <Link to={previous.fields.slug}>\r\n                            <p>{previous.frontmatter.title}</p>\r\n                        </Link>\r\n                    )}\r\n                </>\r\n            )}\r\n            {next === false ? null : (\r\n                <>\r\n                    {next && (\r\n                        <Link to={next.fields.slug}>\r\n                            <p>{next.frontmatter.title}</p>\r\n                        </Link>\r\n                    )}\r\n                </>\r\n            )}\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport const query = graphql`\r\n        query PostsBySlug($slug: String) {\r\n            mdx(fields: { slug: { eq: $slug } }) {\r\n                frontmatter {\r\n                    title\r\n                }\r\n            }\r\n        }\r\n    `;"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","MDXContext","useMDXComponents","components","contextComponents","emptyObject","MDXProvider","_ref","children","disableParentContext","allComponents","Provider","value","props","React","style","fontSize","border","padding","background","entries","map","val","color","JSON","stringify","blogPostTemplate","data","pageContext","_data$mdx","mdx","frontmatter","previous","body","next","post","Layout","Dump","title","date","Link","to","fields","slug"],"sourceRoot":""}