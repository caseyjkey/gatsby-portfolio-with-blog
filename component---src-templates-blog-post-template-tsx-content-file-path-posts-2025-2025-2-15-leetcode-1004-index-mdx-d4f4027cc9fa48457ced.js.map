{"version":3,"file":"component---src-templates-blog-post-template-tsx-content-file-path-posts-2025-2025-2-15-leetcode-1004-index-mdx-d4f4027cc9fa48457ced.js","mappings":"sNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,OACNC,IAAK,QACJC,EAAAA,EAAAA,KAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,2JAA4J,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,yGAA0GK,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,KAAM,yLAA0L,KAAMI,EAAAA,cAAoBR,EAAYK,IAAK,KAAMG,EAAAA,cAAoBR,EAAYI,KAAM,CAChtBK,UAAW,mBACV,khBAAmhB,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,ydAAse,KAAMK,EAAAA,cAAoBR,EAAYK,IAAK,KAAMG,EAAAA,cAAoBR,EAAYI,KAAM,CAChoCK,UAAW,mBACV,4vBAA6vB,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,2JAA4J,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,mWAAoW,KAAMK,EAAAA,cAAoBR,EAAYK,IAAK,KAAMG,EAAAA,cAAoBR,EAAYI,KAAM,CACn7CK,UAAW,mBACV,snBAAunB,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,6IAC3qB,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,KAAsBP,EAAMQ,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWZ,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,2DCXO,MAAMa,EAAWC,EAAAA,QAAOC,IAAIC,WAAW,CAC5CC,YAAa,6BACbC,YAAa,eAFSJ,CAGrB,CAAC,+DACJ,SAASK,EAAiBC,GACxB,IAAI,KAACC,EAAI,YAAEC,EAAW,SAAEC,GAAYH,EACpC,MAAM,YAACI,GAAeH,EAAKI,KACrB,SAACC,EAAQ,KAAEC,EAAI,KAAEC,GAAQN,EAC/B,OAAOb,EAAAA,cAAoBoB,EAAAA,EAAQ,KAAMpB,EAAAA,cAAoBqB,EAAAA,cAAe,CAC1EC,MAAOA,EAAAA,IACNtB,EAAAA,cAAoBuB,EAAAA,GAAM,KAAMvB,EAAAA,cAAoBwB,EAAAA,EAAY,MAAOxB,EAAAA,cAAoBI,EAAU,KAAMJ,EAAAA,cAAoByB,EAAAA,GAAS,CACzIxB,UAAW,eACVc,EAAYW,OAAQ1B,EAAAA,cAAoB,IAAK,CAC9CC,UAAW,eACVkB,EAAKJ,YAAYY,MAAOb,EAAUG,GAAYjB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMiB,GAAYjB,EAAAA,cAAoB4B,EAAAA,GAAM,CAC/HC,GAAIZ,EAASa,OAAOC,MACnB/B,EAAAA,cAAoB,IAAK,KAAMiB,EAASF,YAAYW,SAAUR,GAAQlB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMkB,GAAQlB,EAAAA,cAAoB4B,EAAAA,GAAM,CACnJC,GAAIX,EAAKY,OAAOC,MACf/B,EAAAA,cAAoB,IAAK,KAAMkB,EAAKH,YAAYW,UAAW1B,EAAAA,cAAoBgC,EAAAA,EAAQ,QAC5F,CACe,SAASC,EAAiB1C,GACvC,OAAOS,EAAAA,cAAoBU,EAAkBnB,EAAOS,EAAAA,cAAoBkC,EAAqB3C,GAC/F,C","sources":["webpack://portfolio-app/./posts/2025/2025-2-15-leetcode-1004/index.mdx","webpack://portfolio-app/./src/templates/blogPostTemplate.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"I completed the LeetCode 150! Since then, I haven't stopped practicing.\\r\\nI want to master common algorithms and feel confident for future interviews.\"), \"\\n\", React.createElement(_components.p, null, \"For this problem, I started with this greedy solution. We always flip a zero if\\r\\nwe haven't done so \", React.createElement(_components.code, null, \"k\"), \" times. Each step, we check if our count is a new maximum.\\r\\nIf we reach a zero and used all our flips, we reset our count and flips.\\r\\nWe start counting again from this position.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"class Solution:\\r\\n    def longestOnes(self, nums: List[int], k: int) -> int:\\r\\n        largest = float('-inf')\\r\\n        count = 0\\r\\n        flipped = 0\\r\\n        for num in nums:\\r\\n            if num == 1:\\r\\n                count += 1\\r\\n            if num == 0 and flipped < k:\\r\\n                count += 1\\r\\n                flipped += 1\\r\\n            elif num == 0 and flipped == k:\\r\\n                largest = max(largest, count)\\r\\n                count, flipped = 1, 1\\r\\n        \\r\\n        return largest\\n\")), \"\\n\", React.createElement(_components.p, null, \"This works for the first example:\\r\\n\\\"\\\"\\\"\\r\\nInput: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2\\r\\nOutput: 6 (correct!)\\r\\n\\\"\\\"\\\"\\r\\nHowever, for the second example, it  fails to connect the first\\r\\ntwo strings of ones.\\r\\n\\\"\\\"\\\"\\r\\nInput: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3\\r\\nOutput: 9 (incorrect, expected 10.)\\r\\n\\\"\\\"\\\"\\r\\nTo fix this, we will have to alter our algorithm to\\r\\nconditionally flip a zero. My idea is to apply our previous algorithm at each step.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"class Solution:\\r\\n    def longestOnes(self, nums: List[int], k: int) -> int:\\r\\n        largest = float('-inf')\\r\\n\\r\\n        def countOnes(start):\\r\\n            count = 0\\r\\n            flipped = 0\\r\\n            for i in range(start, len(nums)):\\r\\n                num = nums[i]\\r\\n                if num == 1:\\r\\n                    count += 1\\r\\n                if num == 0 and flipped < k:\\r\\n                    choice = i \\r\\n                    count += 1\\r\\n                    flipped += 1\\r\\n                elif num == 0 and flipped == k:\\r\\n                    return count\\r\\n            return count\\r\\n        \\r\\n        for i in range(len(nums)):\\r\\n            largest = max(largest, countOnes(i))\\r\\n        \\r\\n        return largest\\n\")), \"\\n\", React.createElement(_components.p, null, \"Unfortunately, this is inefficient, but it works. It has a quadratic time complexity of\\r\\nO(n) = (N^2 + n) / 2, also known as the nth triangle number.\"), \"\\n\", React.createElement(_components.p, null, \"Rather we should make this algorithm into a sliding-window algorithm.\\r\\nWhen we reach the end of a series of ones, we want to slide our window by moving our start to the\\r\\nsecond flip we made by removing our first flip along with any tail attached to it.\\r\\nTo do this, we create a queue and add our tail each time we flip and set the new tail to 0.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"from collections import deque\\r\\nclass Solution:\\r\\n    def longestOnes(self, nums: List[int], k: int) -> int:\\r\\n        largest = float('-inf')\\r\\n        count, tail = 0, 0\\r\\n        tails = deque([])\\r\\n        for i, num in enumerate(nums):\\r\\n            count += 1\\r\\n            tail += 1\\r\\n            if num == 0:\\r\\n                if tails and len(tails) == k:\\r\\n                    count -= tails.popleft()\\r\\n                elif not k:\\r\\n                    count = 0\\r\\n                tails.append(tail)\\r\\n                tail = 0\\r\\n            largest = max(largest, count)\\r\\n        return largest\\n\")), \"\\n\", React.createElement(_components.p, null, \"This has a time complexity of O(n) = n at the tradeoff of space complexity being\\r\\nO(n) = n compared to O(n) = 1 for previous solutions.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/trill/Development/gatsby-portfolio-with-blog/posts/2025/2025-2-15-leetcode-1004/index.mdx\";\nimport {Link} from 'gatsby';\nimport React from 'react';\nimport Layout from '../components/Layout';\nimport {Heading} from '../components/style.ts';\nimport styled, {ThemeProvider} from 'styled-components';\nimport {theme, Body} from '../components/style';\nimport Navigation from '../components/Navigation';\nimport Footer from '../components/Footer';\nexport const BlogPost = styled.div.withConfig({\n  displayName: \"blogPostTemplate__BlogPost\",\n  componentId: \"sc-6bdelx-0\"\n})([\"margin:0 auto;margin-top:6em;max-width:800px;padding:20px;\"]);\nfunction BlogPostTemplate(_ref) {\n  let {data, pageContext, children} = _ref;\n  const {frontmatter} = data.mdx;\n  const {previous, next, post} = pageContext;\n  return React.createElement(Layout, null, React.createElement(ThemeProvider, {\n    theme: theme\n  }, React.createElement(Body, null, React.createElement(Navigation, null), React.createElement(BlogPost, null, React.createElement(Heading, {\n    className: \"text-center\"\n  }, frontmatter.title), React.createElement(\"p\", {\n    className: \"text-center\"\n  }, post.frontmatter.date), children, previous && React.createElement(React.Fragment, null, previous && React.createElement(Link, {\n    to: previous.fields.slug\n  }, React.createElement(\"p\", null, previous.frontmatter.title))), next && React.createElement(React.Fragment, null, next && React.createElement(Link, {\n    to: next.fields.slug\n  }, React.createElement(\"p\", null, next.frontmatter.title)))), React.createElement(Footer, null))));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst query = \"3188270682\";\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","pre","_provideComponents","components","React","className","wrapper","MDXLayout","BlogPost","styled","div","withConfig","displayName","componentId","BlogPostTemplate","_ref","data","pageContext","children","frontmatter","mdx","previous","next","post","Layout","ThemeProvider","theme","Body","Navigation","Heading","title","date","Link","to","fields","slug","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}