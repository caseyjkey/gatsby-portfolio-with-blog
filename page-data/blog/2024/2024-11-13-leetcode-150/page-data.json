{"componentChunkName":"component---src-templates-blog-post-template-tsx-content-file-path-posts-blog-2024-2024-11-13-leetcode-150-index-mdx","path":"/blog/2024/2024-11-13-leetcode-150/","result":{"data":{"mdx":{"frontmatter":{"title":"LeetCode 150. Evaluate Reverse Polish Notation"}}},"pageContext":{"slug":"/blog/2024/2024-11-13-leetcode-150/","previous":{"fields":{"slug":"/blog/2024/2024-11-12-leetcode-57/"},"frontmatter":{"title":"LeetCode 57. Insert Interval","date":"November 12, 2024"},"body":"\r\nThis took me a long time to cover all cases. \r\n\r\n# Solution\r\n```python\r\nclass Solution:\r\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\r\n        start, end = newInterval\r\n        inserted = False\r\n        res = []\r\n        for item in intervals:\r\n            if end < item[0]:\r\n                if not inserted:\r\n                    res.append([start, end])\r\n                    inserted = True\r\n                res.append(item)\r\n            elif end >= item[0] and end <= item[1]:\r\n                start = item[0] if item[0] < start else start\r\n                end = item[1]\r\n            elif start >= item[0] and end <= item[1]:\r\n                start, end = item\r\n                res.append([start, end])\r\n                inserted = True\r\n            elif start >= item[0] and start <= item[1] and end > item[1]:\r\n                start = item[0]\r\n            elif start > item[1]:\r\n                res.append(item)\r\n\r\n        if not inserted:\r\n            res.append([start, end])\r\n        return res\r\n            \r\n```\r\nO(n) = n since we iterate over all elements once.\r\n\r\n## Improvements\r\nThis solution has the same complexity, but it is simpler thereby being more maintanable.\r\n\r\n```python\r\nclass Solution:\r\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\r\n        res = []\r\n        n = len(intervals)\r\n\r\n        i = 0\r\n        while i < n and intervals[i][1] < newInterval[0]:\r\n            res.append(intervals[i])\r\n            i += 1\r\n\r\n        while i < n and newInterval[1] >= intervals[i][0]:\r\n            newInterval[0] = min(intervals[i][0], newInterval[0])\r\n            newInterval[1] = max(intervals[i][1], newInterval[1])\r\n            i += 1\r\n        \r\n        res.append(newInterval)\r\n        res.extend(intervals[i:])\r\n\r\n        return res\r\n```\r\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/blog/2024/2024-11-12-leetcode-57/index.mdx"}},"next":{"fields":{"slug":"/blog/2024/2024-11-14-leetcode-224/"},"frontmatter":{"title":"LeetCode 224. Basic Calculator","date":"November 14, 2024"},"body":"\r\nFinal stack problem for this practice set is a hard question. \r\nTook me an hour and a half to come up with this convoluted method. Parsing numbers character by character was my first mistake.\r\n\r\n# Solution\r\n```python\r\nclass Solution:\r\n    def calculate(self, s: str) -> int:\r\n        parsed = []\r\n        num = ''\r\n        for token in s:\r\n            if token in ['(', ')', '+', '-', ' ']:\r\n                if num:\r\n                    parsed.append(num)\r\n                    num = ''\r\n                parsed.append(token)\r\n            else:\r\n                num += token\r\n        if num:\r\n            parsed.append(num)\r\n\r\n        s = parsed\r\n        nums = []\r\n        ops = []\r\n        total = 0\r\n        for token in s:\r\n            match token:\r\n                case '(':\r\n                    ops.append('(')\r\n                    nums.append('(')\r\n                case ')':\r\n                    ops.pop()\r\n                    right = nums.pop()\r\n                    nums.pop()\r\n                    if ops and ops[-1] != '(' and right != '(':\r\n                        op = ops.pop()\r\n                        if op == '+':\r\n                            total = nums.pop() + right\r\n                        elif op == '-':\r\n                            if nums and nums[-1] != '(':\r\n                                total = nums.pop() - right\r\n                            else:\r\n                                total = right * -1\r\n                        nums.append(total)\r\n                        total = 0\r\n                    else:\r\n                        nums.append(right)\r\n                case '-':\r\n                    ops.append('-')\r\n                case '+':\r\n                    ops.append('+')\r\n                case ' ':\r\n                    pass\r\n                case _:\r\n                    if not ops or ops[-1] == '(':\r\n                        total += int(token)\r\n                    else:\r\n                        op = ops.pop()\r\n                        if op == '+':\r\n                            total = int(token) + nums.pop()\r\n                        elif op == '-':\r\n                            if nums and nums[-1] != '(':\r\n                                total = int(nums.pop()) - int(token)\r\n                            else:\r\n                                total = -1 * int(token)\r\n                    nums.append(total)\r\n                    total = 0\r\n        return nums[-1]\r\n```\r\nO(n) = n since we iterate over all elements once. Space complexity also O(n) = n for the stack.","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/blog/2024/2024-11-14-leetcode-224/index.mdx"}},"post":{"fields":{"slug":"/blog/2024/2024-11-13-leetcode-150/"},"frontmatter":{"title":"LeetCode 150. Evaluate Reverse Polish Notation","date":"November 13, 2024"},"body":"\r\nNow I'm on to stacks. I had to rethink my strategy of going from right to left, to left to right. I was overcomplicating it.\r\n\r\n# Solution\r\n```python\r\nclass Solution:\r\n    def evalRPN(self, tokens: List[str]) -> int:\r\n        stack = []\r\n        for token in tokens:\r\n            if token in ['+', '/', '+', '-', '*']:\r\n                right = int(stack.pop())\r\n                left = int(stack.pop())\r\n                match token:\r\n                    case '+':\r\n                        res = left + right\r\n                    case '/':\r\n                        res = left / right\r\n                    case '+':\r\n                        res = left + right\r\n                    case '-':\r\n                        res = left - right\r\n                    case '*':\r\n                        res = left * right\r\n                stack.append(res)\r\n            else:\r\n                stack.append(token)\r\n        return int(stack[-1])\r\n\r\n            \r\n```\r\nO(n) = n since we iterate over all elements once. Space complexity also O(n) = n for the stack.","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/blog/2024/2024-11-13-leetcode-150/index.mdx"}},"frontmatter":{"title":"LeetCode 150. Evaluate Reverse Polish Notation","date":"2024-11-13T00:00:00.000Z","published":true}}},"staticQueryHashes":[],"slicesMap":{}}