{"componentChunkName":"component---src-templates-blog-post-template-tsx-content-file-path-posts-blog-2024-2024-10-08-scholarships-plus-index-mdx","path":"/blog/2024/2024-10-08-scholarships-plus/","result":{"data":{"mdx":{"frontmatter":{"title":"Scholarships Plus"}}},"pageContext":{"slug":"/blog/2024/2024-10-08-scholarships-plus/","previous":{"fields":{"slug":"/blog/2024/2024-10-07-intro-to-cursor/"},"frontmatter":{"title":"Intro to Cursor","date":"October 7, 2024"},"body":"\r\nToday I decided to embrace the AI revolution and try out Cursor. I'm going to write a quick LeetCode solution, then dive into some project ideas.\r\n\r\n# LeetCode Problem\r\n## The Problem\r\nSince we have some help from Cursor tonight, we wil be solving a hard problem.\r\nToday's problem is **4. Median of Two Sorted Arrays**. The problem is as follows:\r\n\r\nGiven two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\r\n\r\nThe overall run time complexity should be O(log (m+n)).\r\n\r\nExample 1:\r\n    Input: nums1 = [1,3], nums2 = [2]\r\n    Output: 2.00000\r\n    Explanation: merged array = [1,2,3] and median is 2.\r\n\r\nExample 2:\r\n    Input: nums1 = [1,2], nums2 = [3,4]\r\n    Output: 2.50000\r\n    Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\r\n\r\n## The Solution\r\nLet's answer using the UMPIRE method:\r\n* Understand\r\n    * We have two sorted arrays, and we must merge them and find the median.\r\n    * The median is the middle value of a sorted list. If the list has an even number of elements, the median is the average of the two middle elements.\r\n* Match\r\n    * We can merge the two arrays and then find the median, but this would not be O(log(m+n)).\r\n    * We can use a modified binary search to find the median.\r\n        * Binary search is O(log n) and we can use it to find the median.\r\n* Plan\r\n    * We can use a modified binary search to find the median.\r\n    * We will use two pointers to traverse the arrays.\r\n    * We will use a helper function to find the median of the two arrays.\r\n* Implement\r\n```python\r\nclass Solution:\r\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\r\n        # Ensure nums1 is the smaller array\r\n        if len(nums1) > len(nums2):\r\n            nums1, nums2 = nums2, nums1\r\n        \r\n        m, n = len(nums1), len(nums2)\r\n        total_length = m + n\r\n        half = (total_length + 1) // 2\r\n        \r\n        left, right = 0, m\r\n        \r\n        while left <= right:\r\n            partition1 = (left + right) // 2\r\n            partition2 = half - partition1\r\n            \r\n            left1 = nums1[partition1 - 1] if partition1 > 0 else float('-inf')\r\n            right1 = nums1[partition1] if partition1 < m else float('inf')\r\n            left2 = nums2[partition2 - 1] if partition2 > 0 else float('-inf')\r\n            right2 = nums2[partition2] if partition2 < n else float('inf')\r\n            \r\n            if left1 <= right2 and left2 <= right1:\r\n                # We have found the correct partition\r\n                if total_length % 2 == 0:\r\n                    return (max(left1, left2) + min(right1, right2)) / 2\r\n                else:\r\n                    return max(left1, left2)\r\n            elif left1 > right2:\r\n                right = partition1 - 1\r\n            else:\r\n                left = partition1 + 1\r\n        \r\n        raise ValueError(\"Input arrays are not sorted\")\r\n\r\n```\r\n* Review\r\n    * The code is clean, it uses descriptive variables and follows a logical flow.\r\n    * The code is correct, it passes the test cases.\r\n* Evaluate\r\n    * The code is efficient, it runs in O(log(m+n)) time.\r\n    * We never iterate over the entire array, even in the worst case.\r\n\r\n## Notes\r\nCursor generates duplicate responses. I had to remove unnecessary text.\r\nIt does not appear to elaborate on its reasoning.\r\nElaborating on specific parts is easy using the annotated keyboard commands.\r\nUsing cursor to write LeetCode solutions is great, but it won't be useful for interviews.\r\nHopefully it will be as useful for projects.\r\nIt would be nice if I could tab through the suggestions, rather than using tab to accept current suggestion.\r\nCursor has been a drop-in replacement for Code, requiring no configuration to continue prior development workflow.\r\n\r\n# Project Ideas\r\nI had a few ideas for projects I want to build.\r\n* A wallpaper web app that scrapes image boards.\r\n    * It would have authentication for user accounts.\r\n        * Users can favorite wallpapers, saving them for later.\r\n        * Users can download wallpapers, saving bandwidth compared to anonymous access.\r\n    * It would hide NSFW wallpapers by parsing post text.\r\n* A scholarship essay assistant.\r\n    * It would use RAG to import past essays as context during prompts.\r\n    * It would use GPT-4o to proofread and improve essays.\r\n    * It would track scholarship deadlines.\r\n    * It would save essays to a user's Google Drive.\r\n\r\nI will use the wallpaper app to learn Next.js and Tailwind.\r\nI don't expect to spend much time on it, as it can only be monetized through ads.\r\nI will use the scholarship essay assistant to learn about:\r\n    * RAG,\r\n    * GPT-4o,\r\n    * Google Drive API,\r\n    * Docker,\r\n    * AWS,\r\n    * React,\r\n    * and TypeScript.\r\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/blog/2024/2024-10-07-intro-to-cursor/index.mdx"}},"next":{"fields":{"slug":"/blog/2024/2024-10-13-email-processing-design/"},"frontmatter":{"title":"Email Processing System Design","date":"October 13, 2024"},"body":"\r\nI'm looking forward to an interview for a software engineer position at StubHub.\r\nIt offers work with microservices, kubernetes, and cloud-native technologies.\r\nThe position focuses on DevOps, such as infrastructure, build, deployment, and artifact management.\r\nI'm excited because my current experience aligns with the position's focus. \r\nThis will be an improvement for my career as it offers better compensation and location (Santa Monica!).\r\n\r\n# Interview Prep\r\nI checked Glassdoor, and it sounds like the technical interview question will be easier than Google was.\r\nIt will likely be a LeetCode medium or easy question, but there was mention of a system design question.\r\nSeveral people said they were asked to design an email processing system.\r\nSo, I want to write about how I would design such a system.\r\n\r\n# System Design\r\n## System Components\r\n### Email Receiving\r\nEmails will be received through an API provided by the email hosting service.\r\nThe API will have a `/send` endpoint that the email provider can call to send an email to a user.\r\nThe API will have a `/receive` endpoint that the email provider can call to receive an email at a specific address.\r\n\r\n### Email Parsing\r\nOnce an email is received, it needs to be parsed.\r\nThe content and metadata needs to be extracted.\r\nThe content needs to be converted to a format that can be processed by the system.\r\nThis would likely be a JSON blog format to be stored in a database.\r\n\r\n### Email Classification\r\nEmails need to be categorized, at the least by their sender and receiver.\r\nThis will allow for the user and administrator to view their sent and received emails.\r\n\r\n### Email Routing\r\nEmails need to be routed to the correct user.\r\nThis will allow for the user to view their emails.\r\nThis will be done by using their email address to look up the user ID in the database..\r\nThen, the email's content which was stored earlier will have its ID added to the user's received emails.\r\nThis could be stored as a one-to-many relationship.\r\n\r\n### Email Storage\r\nEmails need to be stored in a database.\r\nThe database will need to be able to store the email's content, metadata, and tags.\r\nSince this data is structured, it is a good fit for a structured SQL database like Postgres.\r\n\r\n### Email Client\r\nEmails can be exposed to the user in their client.\r\nTo do this, the data must be exposed through an API.\r\nThis will follow an email protocol such as SMTP, POP, or IMAP.\r\nWe follow the common protocols so the the user can use any email client to access their emails.\r\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/blog/2024/2024-10-13-email-processing-design/index.mdx"}},"post":{"fields":{"slug":"/blog/2024/2024-10-08-scholarships-plus/"},"frontmatter":{"title":"Scholarships Plus","date":"October 8, 2024"},"body":"\r\nI've began a new project, scholarships-plus. This will be a CRUD app for tracking and improving scholarship essays.\r\n\r\n# App Idea\r\nI am creating this app to improve student's scholarship essays by improving their past submissions.\r\nThis app will allow students to upload their essays, and then use AI to improve them.\r\nI want to implement RAG to give context to essay prompts. \r\n\r\n# Framework Choice\r\n## Next.js vs Remix\r\nAt first, I wanted to use Next.js as my React framework since I used it while working with Amazon.\r\nHowever, I noticed that Next.js is more popular for its server-side rendering features.\r\nSince this will be a client-side app, I decided improved SEO through SSR is not needed for this app.\r\nSo, I decided to look into Remix. It looks great for building fast web apps with a focus on developer experience.\r\nI'm glad to have found a [great starter project](https://remix.run/resources/remix-blues-stack) integrating Postgres for the database, Cypress for testing, and a full CI/CD workflow through Github Actions.\r\nHowever, I feel like I am losing experience from setting all these features up from scratch. Hopefully the benefits of each component become apparent once I begin implementing my scholarship app.\r\n\r\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/blog/2024/2024-10-08-scholarships-plus/index.mdx"}},"frontmatter":{"title":"Scholarships Plus","date":"2024-10-08T00:00:00.000Z","published":true}}},"staticQueryHashes":[],"slicesMap":{}}