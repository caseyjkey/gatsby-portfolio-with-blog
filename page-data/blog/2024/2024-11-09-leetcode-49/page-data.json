{"componentChunkName":"component---src-templates-blog-post-template-tsx-content-file-path-posts-blog-2024-2024-11-09-leetcode-49-index-mdx","path":"/blog/2024/2024-11-09-leetcode-49/","result":{"data":{"mdx":{"frontmatter":{"title":"LeetCode 49. Group Anagrams"}}},"pageContext":{"slug":"/blog/2024/2024-11-09-leetcode-49/","previous":{"fields":{"slug":"/blog/2024/2024-11-06-leetcode-289/"},"frontmatter":{"title":"LeetCode 289. Game of Life","date":"November 6, 2024"},"body":"\nFinal matrix problem, this one a bit special to me. My first repo in Github is for a Game of Life program in C++. I created it in 2011 as a science fair project.\n\n# Solution\nThis method uses constant space by usind integer division and modulo operations. We use this to update state in-place, then we traverse over the grid again to convert the values back to 0 or 1.\n```python\nclass Solution:\n    def gameOfLife(self, board: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        neighbors = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n        for i, row in enumerate(board):\n            for j, cell in enumerate(row):\n                neighborCount = 0\n                for (nx, ny) in neighbors:\n                    y, x = i + ny, j + nx\n                    if (x >= 0 and y >= 0 and\n                        x < len(board[0]) and y < len(board) and\n                        board[y][x] % 2):\n                        neighborCount += 1\n                if cell % 2 and neighborCount < 2:\n                    pass\n                elif cell % 2 and neighborCount == 2 or neighborCount == 3:\n                    board[i][j] += 2\n                elif cell % 2 and neighborCount > 3:\n                    pass\n                elif not cell % 2 and neighborCount == 3:\n                    board[i][j] += 2\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                board[i][j] = board[i][j] // 2\n``\n(n) = m * n\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/blog/2024/2024-11-06-leetcode-289/index.mdx"}},"next":{"fields":{"slug":"/blog/2024/2024-11-11-leetcode-56/"},"frontmatter":{"title":"LeetCode 56. Merge Intervals","date":"November 11, 2024"},"body":"\r\nNow I'm onto intervals. This one merges all intersecting intervals and returns the distinct items.\r\n\r\n# Solution\r\n```python\r\nclass Solution:\r\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\r\n        res = []\r\n        intervals = sorted(intervals)\r\n        start, end = intervals[0]\r\n        for item in intervals[1:]:\r\n            if end >= item[0] and item[1] > end:\r\n                end = item[1]\r\n            if start >= item[0] and start <= item[1]:\r\n                start = item[0]\r\n            if end < item[0] or start > item[1]:\r\n                res.append([start, end])\r\n                start, end = item\r\n        res.append([start, end])\r\n        return res\r\n```\r\nO(n) = nlog(n) due to the sorted() method\r\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/blog/2024/2024-11-11-leetcode-56/index.mdx"}},"post":{"fields":{"slug":"/blog/2024/2024-11-09-leetcode-49/"},"frontmatter":{"title":"LeetCode 49. Group Anagrams","date":"November 9, 2024"},"body":"\nWorking on hashmap problems now. \n\n# Solution\n```python\nfrom collections import defaultdict\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        indexToSortedWord = defaultdict(list)\n        for i, word in enumerate(strs):\n            indexToSortedWord[str(sorted(word))].append(i)\n        \n        result = []\n        for groupIdx in indexToSortedWord.values():\n            group = []\n            for idx in groupIdx:\n                group.append(strs[idx])\n            result.append(group)\n        return result \n```\nO(n) = n * m * log(m) time complexity, and O(n) = n space complexity.\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/blog/2024/2024-11-09-leetcode-49/index.mdx"}},"frontmatter":{"title":"LeetCode 49. Group Anagrams","date":"2024-11-09T00:00:00.000Z","published":true}}},"staticQueryHashes":[],"slicesMap":{}}