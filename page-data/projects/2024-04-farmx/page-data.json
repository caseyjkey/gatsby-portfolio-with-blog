{"componentChunkName":"component---src-templates-blog-post-template-tsx-content-file-path-posts-projects-2024-04-farmx-index-mdx","path":"/projects/2024-04-farmx/","result":{"data":{"mdx":{"frontmatter":{"title":"Oracle Release Management"}}},"pageContext":{"slug":"/projects/2024-04-farmx/","previous":{"fields":{"slug":"/blog/2025/2025-5-3-leetcode-32/"},"frontmatter":{"title":"LeetCode 32. Longest Valid Parantheses","date":"May 3, 2025"},"body":"\r\nI went through a period of intense study, focusing on solving problems with C++.\r\nNow, I'm back to Python and happy to walk through this solution to\r\nlongest valid parantheses.\r\n\r\n```python\r\nclass Solution:\r\n    def longestValidParentheses(self, s: str) -> int:\r\n        stack = [-1]\r\n        max_len = 0\r\n\r\n        for i in range(len(s)):\r\n            if s[i] == '(':\r\n                stack.append(i)\r\n            else:\r\n                stack.pop()\r\n                if not stack:\r\n                    stack.append(i)\r\n                else:\r\n                    max_len = max(max_len, i - stack[-1])\r\n        \r\n        return max_len\r\n```\r\nEach time we encounter an opening paranthesis, we add its index to our stack.\r\nThus, when we find a closing parenthesis, we pop the stack.\r\nThis will leave us with the index of the last invalid index, or an empty array (we reached an invalid closing paranthesis).\r\nWith that index of the last invalid paranthesis, we calculate the max length.\r\nThis works for this  example:\r\n\r\n> Input: s = \")()\"\r\n>> Output: 2 (correct!)\r\n\r\nWe can check with a longer example too.\r\n\r\n> Input: s = \")()()\"\r\n>> Output: 4\r\n\r\nThe time complexity is O(n) since we step through the array once,\r\nand our space complexity is also O(n).\r\nWe use a stack that can be up to N elements (all opening parantheses).\r\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/blog/2025/2025-5-3-leetcode-32/index.mdx"}},"next":null,"post":{"fields":{"slug":"/projects/2024-04-farmx/"},"frontmatter":{"title":"Oracle Release Management","date":"October 1, 2025"},"body":"\n**Applications Developer 2** | April 2024 - September 2025\n\n## Key Achievements\n\n- Built and launched a scalable release management tool supporting 13,780 users with high reliability\n- Mentored new developers, facilitating knowledge transfer and collaborative problem-solving\n- Led onboarding and support for users, resolving bugs, gathering feedback, and refining key features\n- Efficiently ingested data sources with Python, DRF, and Celery for asynchronous data processing\n\n## Technologies Used\n\n- Git & GitLab\n- Python\n- JavaScript\n- Django & Django REST Framework\n- Oracle Database\n- Celery\n\n## Impact\n\nThis release management tool has become a critical piece of infrastructure, supporting thousands of users and streamlining the release process across the organization.\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/projects/2024-04-farmx/index.mdx"}},"frontmatter":{"title":"Oracle Release Management","date":"2025-10-01T00:00:00.000Z","published":true}}},"staticQueryHashes":[],"slicesMap":{}}