{"componentChunkName":"component---src-templates-blog-post-template-jsx-content-file-path-posts-2024-2024-12-05-leetcode-236-index-mdx","path":"/2024/2024-12-05-leetcode-236/","result":{"data":{"mdx":{"frontmatter":{"title":"LeetCode 236. Lowest Common Ancestor of a Binary Tree"}}},"pageContext":{"slug":"/2024/2024-12-05-leetcode-236/","previous":{"fields":{"slug":"/2024/2024-11-28-leetcode-105/"},"frontmatter":{"title":"LeetCode 105. Construct Binary Tree from Preoder and Inorder Traversal","date":"November 28, 2024"},"body":"\r\nHappy Thanksgiving! I am happy to have solved this without looking up a solution. However, I did have to review traversals.\r\n\r\n# Solution\r\n```python\r\nfrom collections import deque\r\n\r\n# Definition for a binary tree node.\r\n# class TreeNode:\r\n#     def __init__(self, val=0, left=None, right=None):\r\n#         self.val = val\r\n#         self.left = left\r\n#         self.right = right\r\nclass Solution:\r\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\r\n        top = deque(preorder)\r\n        bottom = deque(inorder)\r\n        nodes = []\r\n        seen = set()\r\n\r\n        root = parent = TreeNode()\r\n        while top:\r\n            parent.right = TreeNode(top.popleft())\r\n            left = parent.right\r\n            seen.add(left.val)\r\n            nodes.append(left)\r\n            while left.val != bottom[0]:\r\n                left.left = TreeNode(top.popleft())\r\n                left = left.left\r\n                seen.add(left.val)\r\n                nodes.append(left)\r\n            while bottom and bottom[0] in seen:\r\n                bottom.popleft()\r\n                parent = nodes.pop()\r\n            \r\n        return root.right\r\n```\r\nTime complexity is O(n) = n and space complexity is O(n) due to set and deques.\r\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/2024/2024-11-28-leetcode-105/index.mdx"}},"next":{"fields":{"slug":"/2024/2024-12-12-leetcode-103/"},"frontmatter":{"title":"LeetCode 103. Binary Tree Zigzag Level Order Traversal","date":"December 5, 2024"},"body":"\r\nI am glad I was able to make a solution from my own intuition.\r\n\r\n# Solution\r\n```python\r\nfrom collections import deque\r\n# Definition for a binary tree node.\r\n# class TreeNode:\r\n#     def __init__(self, val=0, left=None, right=None):\r\n#         self.val = val\r\n#         self.left = left\r\n#         self.right = right\r\nclass Solution:\r\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\r\n        nodes = deque([root] if root else [])\r\n        rightToLeft = False\r\n\r\n        result = []\r\n        while nodes:\r\n            level = []\r\n            children = deque([])\r\n            for i in range(len(nodes)):\r\n                if rightToLeft:\r\n                    node = nodes.pop()\r\n                    node.right and children.appendleft(node.right)\r\n                    node.left and children.appendleft(node.left)\r\n                else:\r\n                    node = nodes.popleft()\r\n                    node.left and children.append(node.left)\r\n                    node.right and children.append(node.right)\r\n                level.append(node.val)\r\n            result.append(level)\r\n            if rightToLeft:\r\n                nodes += children\r\n            else:\r\n                nodes = children + nodes\r\n            rightToLeft = not rightToLeft\r\n        return result\r\n```\r\nTime complexity is O(n) = n and space complexity is O(n).\r\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/2024/2024-12-12-leetcode-103/index.mdx"}},"post":{"fields":{"slug":"/2024/2024-12-05-leetcode-236/"},"frontmatter":{"title":"LeetCode 236. Lowest Common Ancestor of a Binary Tree","date":"December 5, 2024"},"body":"\r\nThis is the last month of my goal toward 150 problems done by 2025. I'll have to pick up more than a few problems this weekend. I have 56 problems remaining.\r\n\r\n# Solution\r\n```python\r\nfrom collections import deque\r\n\r\n# Definition for a binary tree node.\r\n# class TreeNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution:\r\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\r\n        if root in (None, p, q): return root\r\n        left, right = [self.lowestCommonAncestor(kid, p, q) for kid in (root.left, root.right)]\r\n        return root if left and right else left or right\r\n            \r\n\r\n```\r\nTime complexity is O(n) = n and space complexity is O(h) where the height is h. Best case the height is log(n) as a balanced tree and worst case is n as a skewed tree.\r\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/2024/2024-12-05-leetcode-236/index.mdx"}},"frontmatter":{"title":"LeetCode 236. Lowest Common Ancestor of a Binary Tree","date":"2024-12-05T00:00:00.000Z","published":true}}},"staticQueryHashes":[],"slicesMap":{}}