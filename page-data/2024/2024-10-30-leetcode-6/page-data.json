{"componentChunkName":"component---src-templates-blog-post-template-tsx-content-file-path-posts-2024-2024-10-30-leetcode-6-index-mdx","path":"/2024/2024-10-30-leetcode-6/","result":{"data":{"mdx":{"frontmatter":{"title":"LeetCode 6. Zigzag Conversion"}}},"pageContext":{"slug":"/2024/2024-10-30-leetcode-6/","previous":{"fields":{"slug":"/2024/2024-10-29-leetcode-151/"},"frontmatter":{"title":"LeetCode 12. Integer to Roman","date":"October 28, 2024"},"body":"\nFinished a couple easy problems, then this medium problem. I feel like this was made easier by python's list slicing.\n\n# Solution\n```python\nclass Solution:\n    def reverseWords(self, s: str) -> str:\n        return ' '.join(s.split()[::-1])\n```\nO(n) = n\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/2024/2024-10-29-leetcode-151/index.mdx"}},"next":{"fields":{"slug":"/2024/2024-10-31-leetcode-28/"},"frontmatter":{"title":"LeetCode 28. Find the Index of the First Occurrence in a String","date":"October 31, 2024"},"body":"\nThis was an easy problem.\n\n# Solution\n```python\nclass Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        for j in range(len(haystack)):\n            if haystack[j:j + len(needle)] == needle:\n                return j\n        return -1\n```\nO(n) = n\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/2024/2024-10-31-leetcode-28/index.mdx"}},"post":{"fields":{"slug":"/2024/2024-10-30-leetcode-6/"},"frontmatter":{"title":"LeetCode 6. Zigzag Conversion","date":"October 30, 2024"},"body":"\nThis one took me about 15 minutes to come up with a solution. I then worked through it with this naive solution.\n\n# Solution\n```python\nclass Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        grid = [['' for column in range(len(s))] for row in range(numRows)]\n        x, y = 0, 0\n        direction = 1\n        for char in s:\n            grid[y][x] = char\n            if y == numRows - 1:\n                direction = -1\n                x += 1\n            elif direction == -1 and y > 0:\n                x += 1\n            elif direction == -1 and y == 0:\n                direction = 1\n            y += direction if numRows > 1 else 0\n        result = \"\"\n        for row in grid:\n            for char in row:\n                if char:\n                    result += char\n        return result\n```\nO(n) = n*m or n^2\n\n## Reflection\nLooking back, I realized I didn't need to include the empty spaces as if it were illustrated. This allows me to simplify my code by using the append() method for lists. Here is my improved version:\n```python\nclass Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        if numRows == 1 or numRows >= len(s):\n            return s\n\n        grid = [[] for _ in range(numRows)]\n        y = 0 \n        direction = 1\n        for char in s:\n            grid[y].append(char)\n            if y == numRows - 1:\n                direction = -1\n            elif y == 0:\n                direction = 1\n            y += direction\n        \n        for i in range(len(grid)):\n            grid[i] = ''.join(grid[i])\n        result = ''.join(grid)\n        return result\n```\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/2024/2024-10-30-leetcode-6/index.mdx"}},"frontmatter":{"title":"LeetCode 6. Zigzag Conversion","date":"2024-10-30T00:00:00.000Z","published":true}}},"staticQueryHashes":[],"slicesMap":{}}