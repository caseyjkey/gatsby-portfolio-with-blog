{"componentChunkName":"component---src-templates-blog-post-template-jsx-content-file-path-posts-2024-2024-11-14-leetcode-224-index-mdx","path":"/2024/2024-11-14-leetcode-224/","result":{"data":{"mdx":{"frontmatter":{"title":"LeetCode 224. Basic Calculator"}}},"pageContext":{"slug":"/2024/2024-11-14-leetcode-224/","previous":{"fields":{"slug":"/2024/2024-11-13-leetcode-150/"},"frontmatter":{"title":"LeetCode 150. Evaluate Reverse Polish Notation","date":"November 13, 2024"},"body":"\r\nNow I'm on to stacks. I had to rethink my strategy of going from right to left, to left to right. I was overcomplicating it.\r\n\r\n# Solution\r\n```python\r\nclass Solution:\r\n    def evalRPN(self, tokens: List[str]) -> int:\r\n        stack = []\r\n        for token in tokens:\r\n            if token in ['+', '/', '+', '-', '*']:\r\n                right = int(stack.pop())\r\n                left = int(stack.pop())\r\n                match token:\r\n                    case '+':\r\n                        res = left + right\r\n                    case '/':\r\n                        res = left / right\r\n                    case '+':\r\n                        res = left + right\r\n                    case '-':\r\n                        res = left - right\r\n                    case '*':\r\n                        res = left * right\r\n                stack.append(res)\r\n            else:\r\n                stack.append(token)\r\n        return int(stack[-1])\r\n\r\n            \r\n```\r\nO(n) = n since we iterate over all elements once. Space complexity also O(n) = n for the stack.","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/2024/2024-11-13-leetcode-150/index.mdx"}},"next":{"fields":{"slug":"/2024/2024-11-15-leetcode-138/"},"frontmatter":{"title":"LeetCode 138. Copy List with Random Pointer","date":"November 15, 2024"},"body":"\r\nThis problem was tricky as I had to track Node references rather than the index given in the input.\r\n\r\n# Solution\r\n```python\r\nfrom collections import defaultdict\r\n\"\"\"\r\n# Definition for a Node.\r\nclass Node:\r\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\r\n        self.val = int(x)\r\n        self.next = next\r\n        self.random = random\r\n\"\"\"\r\n\r\nclass Solution:\r\n    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':\r\n        start = Node(head.val) if head else None\r\n        node = start\r\n        randoms = defaultdict(list)\r\n        nodes = {}\r\n        while head:\r\n            nodes[head] = node\r\n            node.next = Node(head.next.val) if head.next else None\r\n            node.val = head.val\r\n            if head.random:\r\n                randoms[head.random].append(head)\r\n            head = head.next\r\n            node = node.next\r\n        \r\n        for val in randoms.keys():\r\n            for neighbor in randoms[val]:\r\n                nodes[neighbor].random = nodes[val]\r\n\r\n        return start\r\n```\r\nO(n) = n since worst case is 2n due to the while loop, then at most visiting each node again when assigning the randoms' value.","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/2024/2024-11-15-leetcode-138/index.mdx"}},"post":{"fields":{"slug":"/2024/2024-11-14-leetcode-224/"},"frontmatter":{"title":"LeetCode 224. Basic Calculator","date":"November 14, 2024"},"body":"\r\nFinal stack problem for this practice set is a hard question. \r\nTook me an hour and a half to come up with this convoluted method. Parsing numbers character by character was my first mistake.\r\n\r\n# Solution\r\n```python\r\nclass Solution:\r\n    def calculate(self, s: str) -> int:\r\n        parsed = []\r\n        num = ''\r\n        for token in s:\r\n            if token in ['(', ')', '+', '-', ' ']:\r\n                if num:\r\n                    parsed.append(num)\r\n                    num = ''\r\n                parsed.append(token)\r\n            else:\r\n                num += token\r\n        if num:\r\n            parsed.append(num)\r\n\r\n        s = parsed\r\n        nums = []\r\n        ops = []\r\n        total = 0\r\n        for token in s:\r\n            match token:\r\n                case '(':\r\n                    ops.append('(')\r\n                    nums.append('(')\r\n                case ')':\r\n                    ops.pop()\r\n                    right = nums.pop()\r\n                    nums.pop()\r\n                    if ops and ops[-1] != '(' and right != '(':\r\n                        op = ops.pop()\r\n                        if op == '+':\r\n                            total = nums.pop() + right\r\n                        elif op == '-':\r\n                            if nums and nums[-1] != '(':\r\n                                total = nums.pop() - right\r\n                            else:\r\n                                total = right * -1\r\n                        nums.append(total)\r\n                        total = 0\r\n                    else:\r\n                        nums.append(right)\r\n                case '-':\r\n                    ops.append('-')\r\n                case '+':\r\n                    ops.append('+')\r\n                case ' ':\r\n                    pass\r\n                case _:\r\n                    if not ops or ops[-1] == '(':\r\n                        total += int(token)\r\n                    else:\r\n                        op = ops.pop()\r\n                        if op == '+':\r\n                            total = int(token) + nums.pop()\r\n                        elif op == '-':\r\n                            if nums and nums[-1] != '(':\r\n                                total = int(nums.pop()) - int(token)\r\n                            else:\r\n                                total = -1 * int(token)\r\n                    nums.append(total)\r\n                    total = 0\r\n        return nums[-1]\r\n```\r\nO(n) = n since we iterate over all elements once. Space complexity also O(n) = n for the stack.","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/2024/2024-11-14-leetcode-224/index.mdx"}},"frontmatter":{"title":"LeetCode 224. Basic Calculator","date":"2024-11-14T00:00:00.000Z","published":true}}},"staticQueryHashes":[],"slicesMap":{}}