{"componentChunkName":"component---src-templates-blog-post-template-jsx-content-file-path-posts-2024-2024-11-23-leetcode-86-index-mdx","path":"/2024/2024-11-23-leetcode-86/","result":{"data":{"mdx":{"frontmatter":{"title":"LeetCode 86. Partition List"}}},"pageContext":{"slug":"/2024/2024-11-23-leetcode-86/","previous":{"fields":{"slug":"/2024/2024-11-21-leetcode-82/"},"frontmatter":{"title":"LeetCode 82. Remove Duplicates from Sorted List II","date":"November 21, 2024"},"body":"\r\nThe trick for this one was tracking duplicates via the unique boolean and a pending variable.\r\n\r\n# Solution\r\n```python\r\n# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\nclass Solution:\r\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\r\n        start = None\r\n        curr = None\r\n        pending = None\r\n        unique = True\r\n        while head:\r\n            if not pending:\r\n                pending = head\r\n            elif pending.val != head.val and unique:\r\n                if not start:\r\n                    start = pending\r\n                    curr = start\r\n                else:\r\n                    curr.next = pending\r\n                    curr = curr.next\r\n                pending = head\r\n            elif pending.val != head.val and not unique:\r\n                pending = head\r\n                unique = True\r\n            else:\r\n                unique = False\r\n                if curr:\r\n                    curr.next = None\r\n            head = head.next\r\n        \r\n        if pending and unique:\r\n            if start:\r\n                curr.next = pending\r\n            else:\r\n                start = pending\r\n\r\n        return start\r\n```\r\nTime complexity is O(n) = n and space complexity is O(1).\r\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/2024/2024-11-21-leetcode-82/index.mdx"}},"next":{"fields":{"slug":"/2024/2024-11-26-leetcode-146/"},"frontmatter":{"title":"LeetCode 146. LRU Cache","date":"November 26, 2024"},"body":"\r\nThis took me a few days although it's only a medium! It is important to remember Python is pass-by-reference.\r\nI spent a lot of time debugging because I didn't mirror changes between previous and next nodes when moving a node between them.\r\nI was able to debug by creating a list of key-value pairs then printing the list after each operation.\r\n\r\n\r\n# Solution\r\n```python\r\nclass Node:\r\n    def __init__(self, key=0, val=0, prev=None, next=None):\r\n        self.key = key\r\n        self.val = val\r\n        self.prev = prev\r\n        self.next = next\r\n\r\nclass LRUCache:\r\n    def __init__(self, capacity: int):\r\n        self.capacity = capacity\r\n        self.size = 0\r\n        self.d = {}\r\n        self.l = None\r\n        self.start = None\r\n\r\n    def get(self, key: int) -> int:\r\n        if key in self.d:\r\n            node = self.d[key]\r\n            if node.prev and node.next:\r\n                node.prev.next = node.next\r\n                node.next.prev = node.prev\r\n            elif node.next:\r\n                self.start = node.next\r\n                self.start.prev = None\r\n            if self.l != node:\r\n                node.prev = self.l\r\n                self.l.next = node\r\n                self.l = self.l.next\r\n                self.l.next = None\r\n            return node.val\r\n        else:\r\n            return -1\r\n\r\n    def put(self, key: int, value: int) -> None:\r\n        if not key in self.d:\r\n            if self.size == self.capacity:\r\n                node = self.start\r\n                del self.d[node.key]\r\n                self.start = node.next\r\n                if self.start:\r\n                    self.start.prev = None\r\n                self.size -= 1\r\n            if self.l:\r\n                self.l.next = Node(key, value, self.l)\r\n                self.l = self.l.next\r\n            if not self.start:\r\n                self.start = Node(key, value)\r\n                self.l = self.start\r\n            self.d[key] = self.l\r\n            self.size += 1\r\n        else:\r\n            node = self.d[key]\r\n            if node == self.start and self.start.next:\r\n                self.start = self.start.next\r\n                self.start.prev = None\r\n            if node.prev and node.next:\r\n                node.prev.next = node.next\r\n                node.next.prev = node.prev\r\n            if node != self.l:\r\n                node.prev = self.l\r\n                self.l.next = node\r\n            node.val = value\r\n            node.next = None\r\n            self.l = node\r\n\r\n\r\n\r\n# Your LRUCache object will be instantiated and called as such:\r\n# obj = LRUCache(capacity)\r\n# param_1 = obj.get(key)\r\n# obj.put(key,value)\r\n```\r\nTime complexity for get and put operations are O(n) = 1 and space complexity is O(n) due to the dictionary holding each element.\r\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/2024/2024-11-26-leetcode-146/index.mdx"}},"post":{"fields":{"slug":"/2024/2024-11-23-leetcode-86/"},"frontmatter":{"title":"LeetCode 86. Partition List","date":"November 23, 2024"},"body":"\r\nI had to read the comments to understand this problem. I didn't understand how they wanted the ordering until I read a few examples.\r\n\r\n# Solution\r\n```python\r\n# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\nclass Solution:\r\n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\r\n        start = head\r\n        left, right = None, None\r\n\r\n        while head and not right:\r\n            if head.val < x:\r\n                left = head\r\n            else:\r\n                right = head\r\n            head = head.next\r\n        \r\n        prev = None\r\n        \r\n        while head:\r\n            if head.val < x:\r\n                if prev:\r\n                    prev.next = head.next\r\n                if left:\r\n                    left.next = head\r\n                    left = left.next\r\n                else:\r\n                    left = head\r\n                    start = left\r\n                if right.next == head:\r\n                    right.next = head.next\r\n                head.next = right\r\n\r\n            prev = head\r\n            head = head.next\r\n        \r\n        return start\r\n```\r\nTime complexity is O(n) = n and space complexity is O(1).\r\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/2024/2024-11-23-leetcode-86/index.mdx"}},"frontmatter":{"title":"LeetCode 86. Partition List","date":"2024-11-23T00:00:00.000Z","published":true}}},"staticQueryHashes":[],"slicesMap":{}}