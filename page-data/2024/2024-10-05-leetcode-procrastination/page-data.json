{"componentChunkName":"component---src-templates-blog-post-template-jsx-content-file-path-posts-2024-2024-10-05-leetcode-procrastination-index-mdx","path":"/2024/2024-10-05-leetcode-procrastination/","result":{"data":{"mdx":{"frontmatter":{"title":"LeetCode as Procrastination"}}},"pageContext":{"slug":"/2024/2024-10-05-leetcode-procrastination/","previous":{"fields":{"slug":"/2024/2024-10-04-second-leetcode/"},"frontmatter":{"title":"Second LeetCode Blog Post","date":"October 4, 2024"},"body":"\r\n# Second LeetCode Blog Post\r\nToday is another easy problem, and it is focused on bit manipulation.\r\nLet's dive on in.\r\n## The Problem\r\nToday's problem is **190. Reverse Bits**. The problem is as follows:\r\nReverse bits of a given 32 bits unsigned integer.\r\n\r\n## The Solution\r\nI like to format my answers using the UMPIRE method:\r\n* Understand\r\n    * We are given a 32-bit unsigned integer, and we are to reverse the bits.\r\n* Match\r\n    * We can match this problem to a bit manipulation problem.\r\n* Plan\r\n    * We can write a function which casts the number to binary, then a string, and finally reverses it before casting back to binary.\r\n* Implement\r\n``` python\r\n    def reverseBits(self, n: int) -> int:\r\n        b = bin(n)\r\n        s = str(b)[2:].zfill(32)\r\n        s = s[::-1]\r\n        return int(s, 2) \r\n```\r\n* Review\r\n    * The code is clean and concise. We used descriptive variable names. We have implemented a bit manipulation.\r\n    * We can test our code using the examples provided.\r\n    * n = 43261596\r\n        * b = '0b10100101000001111010011100'\r\n        * s = '00000010100101000001111010011100'\r\n        * s = '00111001011110000010100101000000'\r\n``` python\r\n    def test_reverseBits(self):\r\n        assert self.reverseBits(43261596) == 964176192\r\n        assert self.reverseBits(4294967293) == 3221225471\r\n```\r\n* Evaluate\r\n    * Our code runs in O(n) time complexity due to our list slicing.\r\n    * Our space complexity is O(1) as we use the same amount of space regardless of input size.\r\n","internal":{"contentFilePath":"C:/Users/Casey/Development/gatsby-portfolio-with-blog/posts/2024/2024-10-04-second-leetcode/index.mdx"}},"next":null,"post":{"fields":{"slug":"/2024/2024-10-05-leetcode-procrastination/"},"frontmatter":{"title":"LeetCode as Procrastination","date":"October 5, 2024"},"body":"\r\nWe're solving another LeetCode problem today instead of adding a new project to my portfolio. This one is focused on bit manipulation. Let's dive in.\r\n## The Problem\r\nToday's problem is **191. Number of 1 bits**. The problem is as follows:\r\nWrite a function that takes the binary representation of a positive integer and returns the number of \r\nset bits it has (also known as the Hamming weight).\r\n\r\n## The Solution\r\nLet's answer using the UMPIRE method:\r\n* Understand\r\n    * We are given a positive integer, and we are to count the number of 1 bits of the number in bina.\r\n* Match\r\n    * We can match this problem to a bit manipulation problem or an array looping problem. \r\n* Plan\r\n    * We can write a function which casts the number to binary, then a string, and finally counts the number of 1's using a loop.\r\n* Implement\r\n``` python\r\n    def countBits(self, n: int) -> int:\r\n        b = bin(n)\r\n        s = str(b)[2:]\r\n        count = 0\r\n        for bit in s:\r\n            if bit == '1':\r\n                count += 1\r\n        return count\r\n```\r\n* Review\r\n    * The code is clean and concise. We used descriptive variable names.\r\n    * We can test our code using the examples provided.\r\n    * n = 4\r\n        * b = '0b0100'\r\n        * s = '0100'\r\n        * count = 1\r\n``` python\r\n    def test_reverseBits(self):\r\n        assert self.countBits(4) == 1\r\n        assert self.reverseBits(3) == 2\r\n```\r\n* Evaluate\r\n    * Our code runs in O(n) time complexity due to our loop through the string.\r\n    * Our space complexity is O(1) as we use the same amount of space regardless of input size.\r\n","internal":{"contentFilePath":"C:/Users/Casey/Development/gatsby-portfolio-with-blog/posts/2024/2024-10-05-leetcode-procrastination/index.mdx"}},"frontmatter":{"title":"LeetCode as Procrastination","date":"2024-10-05T00:00:00.000Z","published":true}}},"staticQueryHashes":["1487094503","1824709836","2756050595","3405795015"],"slicesMap":{}}