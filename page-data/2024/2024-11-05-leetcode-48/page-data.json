{"componentChunkName":"component---src-templates-blog-post-template-tsx-content-file-path-posts-2024-2024-11-05-leetcode-48-index-mdx","path":"/2024/2024-11-05-leetcode-48/","result":{"data":{"mdx":{"frontmatter":{"title":"LeetCode 48. Rotate Image"}}},"pageContext":{"slug":"/2024/2024-11-05-leetcode-48/","previous":{"fields":{"slug":"/2024/2024-11-04-leetcode-36/"},"frontmatter":{"title":"LeetCode 36. Valid Sudoku","date":"November 4, 2024"},"body":"\nNow, I am working on matrix problems. \n\n# Solution\nThis is my initial greedy solution.\n```python\nclass Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        for row in board:\n            rowVals = set()\n            for column in row:\n                if column != '.' and column in rowVals:\n                    return False\n                rowVals.add(column)\n\n        for col in range(len(board[0])):\n            colVals = set()\n            for row in board:\n                if row[col] != '.' and row[col] in colVals:\n                    return False\n                colVals.add(row[col])\n\n        for subX in range(3):\n            for subY in range(3):\n                gridVals = set()\n                for x in range(3):\n                    for y in range(3):\n                        cell = board[subY * 3 + y][subX * 3 + x]\n                        if cell != '.' and cell in gridVals:\n                            return False\n                        gridVals.add(board[subY * 3 + y][subX * 3 + x])\n        \n        return True\n```\t\n\n## Improvements\nNow, I reviewed other solutions and liked this one which uses a list of tuples and only one nested for loop.\n```python\nclass Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        vals = []\n        for i, row in enumerate(board):\n            for j, x in enumerate(row):\n                if x != '.':\n                    vals += [(x, j), (i, x), (x, i // 3, j // 3)]\n        return len(vals) == len(set(vals))\n```\nI like how tuples are made unique by swapping their position, and the cell value is not mistaken for the row/column because it is a string rather than int.\nO(n) = 1 since board size is fixed.\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/2024/2024-11-04-leetcode-36/index.mdx"}},"next":{"fields":{"slug":"/2024/2024-11-06-leetcode-289/"},"frontmatter":{"title":"LeetCode 289. Game of Life","date":"November 6, 2024"},"body":"\nFinal matrix problem, this one a bit special to me. My first repo in Github is for a Game of Life program in C++. I created it in 2011 as a science fair project.\n\n# Solution\nThis method uses constant space by usind integer division and modulo operations. We use this to update state in-place, then we traverse over the grid again to convert the values back to 0 or 1.\n```python\nclass Solution:\n    def gameOfLife(self, board: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        neighbors = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n        for i, row in enumerate(board):\n            for j, cell in enumerate(row):\n                neighborCount = 0\n                for (nx, ny) in neighbors:\n                    y, x = i + ny, j + nx\n                    if (x >= 0 and y >= 0 and\n                        x < len(board[0]) and y < len(board) and\n                        board[y][x] % 2):\n                        neighborCount += 1\n                if cell % 2 and neighborCount < 2:\n                    pass\n                elif cell % 2 and neighborCount == 2 or neighborCount == 3:\n                    board[i][j] += 2\n                elif cell % 2 and neighborCount > 3:\n                    pass\n                elif not cell % 2 and neighborCount == 3:\n                    board[i][j] += 2\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                board[i][j] = board[i][j] // 2\n``\n(n) = m * n\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/2024/2024-11-06-leetcode-289/index.mdx"}},"post":{"fields":{"slug":"/2024/2024-11-05-leetcode-48/"},"frontmatter":{"title":"LeetCode 48. Rotate Image","date":"November 5, 2024"},"body":"\nWorking through more matrix problems today.\n\n# Solution\nI used a method where we transpose the matrix, then reverse the rows. This is memory efficient in space and locality.\n```python\nclass Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        for i in range(len(matrix)):\n            for j in range(i+1, len(matrix)):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        for i in range(len(matrix)):\n            matrix[i] = matrix[i][::-1]\n        \n        return matrix\n```\n(n) = n^2 since we have nested loops dependent on input size.\n","internal":{"contentFilePath":"/home/trill/Development/gatsby-portfolio-with-blog/posts/2024/2024-11-05-leetcode-48/index.mdx"}},"frontmatter":{"title":"LeetCode 48. Rotate Image","date":"2024-11-05T00:00:00.000Z","published":true}}},"staticQueryHashes":[],"slicesMap":{}}