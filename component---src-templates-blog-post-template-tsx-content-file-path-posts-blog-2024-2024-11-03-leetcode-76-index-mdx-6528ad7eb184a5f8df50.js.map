{"version":3,"file":"component---src-templates-blog-post-template-tsx-content-file-path-posts-blog-2024-2024-11-03-leetcode-76-index-mdx-6528ad7eb184a5f8df50.js","mappings":"uNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,KAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,8DAA+D,KAAMM,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,YAAa,KAAMK,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,8FAA+F,KAAMM,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CACzbI,UAAW,mBACV,glBAAmlB,KAAMD,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,+DAAgEM,EAAAA,cAAoBT,EAAYM,KAAM,KAAM,KAAM,4CAA6CG,EAAAA,cAAoBT,EAAYM,KAAM,KAAM,KAAM,0KAA2K,KAAMG,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CACtlCI,UAAW,mBACV,4rCACL,CAKA,MAJA,SAAoBX,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,KAAsBR,EAAMS,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWb,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,E,2DCVO,MAAMc,EAAWC,EAAAA,QAAOC,IAAIC,WAAW,CAC5CC,YAAa,6BACbC,YAAa,eAFSJ,CAGrB,CAAC,+DACJ,SAASK,EAAiBC,GACxB,IAAI,KAACC,EAAI,YAAEC,EAAW,SAAEC,GAAYH,EACpC,MAAM,YAACI,GAAeH,EAAKI,KACrB,SAACC,EAAQ,KAAEC,EAAI,KAAEC,GAAQN,EAC/B,OAAOb,EAAAA,cAAoBoB,EAAAA,EAAQ,KAAMpB,EAAAA,cAAoBqB,EAAAA,cAAe,CAC1EC,MAAOA,EAAAA,IACNtB,EAAAA,cAAoBuB,EAAAA,GAAM,KAAMvB,EAAAA,cAAoBwB,EAAAA,EAAY,MAAOxB,EAAAA,cAAoBI,EAAU,KAAMJ,EAAAA,cAAoByB,EAAAA,GAAS,CACzIxB,UAAW,eACVc,EAAYW,OAAQ1B,EAAAA,cAAoB,IAAK,CAC9CC,UAAW,eACVkB,EAAKJ,YAAYY,MAAOb,EAAUG,GAAYjB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMiB,GAAYjB,EAAAA,cAAoB4B,EAAAA,GAAM,CAC/HC,GAAIZ,EAASa,OAAOC,MACnB/B,EAAAA,cAAoB,IAAK,KAAMiB,EAASF,YAAYW,SAAUR,GAAQlB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMkB,GAAQlB,EAAAA,cAAoB4B,EAAAA,GAAM,CACnJC,GAAIX,EAAKY,OAAOC,MACf/B,EAAAA,cAAoB,IAAK,KAAMkB,EAAKH,YAAYW,UAAW1B,EAAAA,cAAoBgC,EAAAA,EAAQ,QAC5F,CACe,SAASC,EAAiB3C,GACvC,OAAOU,EAAAA,cAAoBU,EAAkBpB,EAAOU,EAAAA,cAAoBkC,EAAqB5C,GAC/F,C","sources":["webpack://portfolio-app/./posts/blog/2024/2024-11-03-leetcode-76/index.mdx","webpack://portfolio-app/./src/templates/blogPostTemplate.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Last problem for this study set's sliding window problems.\"), \"\\n\", React.createElement(_components.h1, null, \"Solution\"), \"\\n\", React.createElement(_components.p, null, \"This is my initial greedy solution. It passes initial test cases, but fails longer inputs.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"class Solution:\\n    def minWindow(self, s: str, t: str) -> str:\\n        def containsT(substring):\\n            letters = list(t[:])\\n            for i in substring:\\n                if i in letters:\\n                    letters.remove(i)\\n            return len(letters) == 0\\n\\n        n = len(t)\\n        m = len(s)\\n        windowSize = n\\n        while windowSize <= m:\\n            for i in range(0, m):\\n                substring = s[i:i+windowSize]\\n                if containsT(substring):\\n                    return substring\\n            windowSize += 1\\n        return \\\"\\\"\\n\")), \"\\n\", React.createElement(_components.p, null, \"Now to optimize my solution, I plan on stepping through the \", React.createElement(_components.code, null, \"s\"), \" string, and tracking how many counts of \", React.createElement(_components.code, null, \"t\"), \" letters are found. This should be faster as we are keeping track of letter counts as we go, instead of searching for all letters in the substring for each iteration.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"class Solution:\\n    def minWindow(self, s: str, t: str) -> str:\\n        letterCounts = dict()\\n        for letter in t:\\n            if letter in letterCounts:\\n                letterCounts[letter] += 1\\n            else:\\n                letterCounts[letter] = 1\\n        \\n        start = 0\\n        end = 0\\n        windowLength = len(s) + 1\\n        minStart = 0\\n        lettersRemaining = len(t)\\n\\n        while end < len(s):\\n            if s[end] in letterCounts:\\n                if letterCounts[s[end]] > 0:\\n                    lettersRemaining -= 1\\n                letterCounts[s[end]] -= 1\\n            \\n            while lettersRemaining == 0:\\n                if end - start + 1 < windowLength:\\n                    windowLength = end - start + 1\\n                    minStart = start\\n                if s[start] in letterCounts:\\n                    letterCounts[s[start]] += 1\\n                    if letterCounts[s[start]] > 0:\\n                        lettersRemaining += 1\\n                start += 1\\n            end += 1\\n\\n        if windowLength == len(s) + 1:\\n            return \\\"\\\"\\n        else:\\n            return s[minStart:minStart + windowLength]\\n\\n        return \\\"\\\"\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/trill/Development/gatsby-portfolio-with-blog/posts/blog/2024/2024-11-03-leetcode-76/index.mdx\";\nimport {Link} from 'gatsby';\nimport React from 'react';\nimport Layout from '../components/Layout';\nimport {Heading} from '../components/style.ts';\nimport styled, {ThemeProvider} from 'styled-components';\nimport {theme, Body} from '../components/style';\nimport Navigation from '../components/Navigation';\nimport Footer from '../components/Footer';\nexport const BlogPost = styled.div.withConfig({\n  displayName: \"blogPostTemplate__BlogPost\",\n  componentId: \"sc-6bdelx-0\"\n})([\"margin:0 auto;margin-top:6em;max-width:800px;padding:20px;\"]);\nfunction BlogPostTemplate(_ref) {\n  let {data, pageContext, children} = _ref;\n  const {frontmatter} = data.mdx;\n  const {previous, next, post} = pageContext;\n  return React.createElement(Layout, null, React.createElement(ThemeProvider, {\n    theme: theme\n  }, React.createElement(Body, null, React.createElement(Navigation, null), React.createElement(BlogPost, null, React.createElement(Heading, {\n    className: \"text-center\"\n  }, frontmatter.title), React.createElement(\"p\", {\n    className: \"text-center\"\n  }, post.frontmatter.date), children, previous && React.createElement(React.Fragment, null, previous && React.createElement(Link, {\n    to: previous.fields.slug\n  }, React.createElement(\"p\", null, previous.frontmatter.title))), next && React.createElement(React.Fragment, null, next && React.createElement(Link, {\n    to: next.fields.slug\n  }, React.createElement(\"p\", null, next.frontmatter.title)))), React.createElement(Footer, null))));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst query = \"3188270682\";\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h1","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","BlogPost","styled","div","withConfig","displayName","componentId","BlogPostTemplate","_ref","data","pageContext","children","frontmatter","mdx","previous","next","post","Layout","ThemeProvider","theme","Body","Navigation","Heading","title","date","Link","to","fields","slug","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}