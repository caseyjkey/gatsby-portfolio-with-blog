"use strict";(self.webpackChunkportfolio_app=self.webpackChunkportfolio_app||[]).push([[9289],{4699:function(e,n,t){t.r(n),t.d(n,{BlogPost:function(){return d},default:function(){return h}});var l=t(8453),r=t(6540);function a(e){const n=Object.assign({p:"p",h2:"h2",strong:"strong",ul:"ul",li:"li",pre:"pre",code:"code"},(0,l.R)(),e.components);return r.createElement(r.Fragment,null,r.createElement(n.p,null,"We're solving another LeetCode problem today. Tomorrow I will add my new project. Let's dive in."),"\n",r.createElement(n.h2,null,"The Problem"),"\n",r.createElement(n.p,null,"Today's problem is ",r.createElement(n.strong,null,"9. Palindrome Number"),". The problem is as follows:\r\nGiven an integer x, return true if x is a palindrome, and false otherwise."),"\n",r.createElement(n.p,null,"Example 1:\r\nInput: x = 121\r\nOutput: true\r\nExplanation: 121 reads as 121 from left to right and from right to left.\r\nExample 2:"),"\n",r.createElement(n.p,null,"Example 2:\r\nInput: x = -121\r\nOutput: false\r\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.Write a function that takes the binary representation of a positive integer and returns the number of\r\nset bits it has (also known as the Hamming weight)."),"\n",r.createElement(n.h2,null,"The Solution"),"\n",r.createElement(n.p,null,"Let's answer using the UMPIRE method:"),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"Understand","\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"We are given an integer, and we are to determine if it is a palindrome."),"\n",r.createElement(n.li,null,"In an interview. I would ask if we can solve this using strings or if I should solve it mathematically."),"\n"),"\n"),"\n",r.createElement(n.li,null,"Match","\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"We can match this problem to a math problem or string problem."),"\n"),"\n"),"\n",r.createElement(n.li,null,"Plan","\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"We can write a function which casts the number a string, and it will check if the first and last digits are the same until there is 1 or less digits."),"\n"),"\n"),"\n",r.createElement(n.li,null,"Implement"),"\n"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-python"},"class Solution:\r\n    def isPalindrome(self, x: int) -> bool:\r\n        def recursivePalindrome(s: str) -> bool:\r\n            if len(s) <= 1:\r\n                return True\r\n            elif s[0] != s[-1]:\r\n                return False\r\n            return recursivePalindrome(s[1:-1])\r\n        \r\n        return recursivePalindrome(str(x))\n")),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"Review","\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"We implemented this using a locally defined recursive function."),"\n",r.createElement(n.li,null,"We can test our code using the examples provided."),"\n",r.createElement(n.li,null,"x = 121","\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"return True"),"\n"),"\n"),"\n"),"\n"),"\n"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-python"},"    def test_isPalindrome(self):\r\n        assert self.test_isPalindrome(1221)\r\n        assert not self.test_isPalindrome(31)\n")),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"Evaluate","\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"Our code runs in O(n) time complexity due the call being done n/2 times."),"\n",r.createElement(n.li,null,"Our space complexity is O(n) as we are storing the string in memory each time we recursively call.","\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"We can reduce the complexity to constant space by using pointers."),"\n"),"\n"),"\n"),"\n"),"\n"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-python"},"    def isPalindrome(x: int) -> bool:\r\n        s = str(x)\r\n        left = 0\r\n        right = len(s) - 1\r\n        while left < right:\r\n            if s[left] != s[right]:\r\n                return False\r\n            left += 1\r\n            right -= 1\r\n        return True\n")))}var i=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.R)(),e.components);return n?r.createElement(n,e,r.createElement(a,e)):a(e)},s=t(4810),o=t(4399),m=t(3614),u=t(1510),c=t(6409),p=t(572);const d=u.default.div.withConfig({displayName:"blogPostTemplate__BlogPost",componentId:"sc-6bdelx-0"})(["margin:0 auto;margin-top:6em;max-width:800px;padding:20px;"]);function E(e){let{data:n,pageContext:t,children:l}=e;const{frontmatter:a}=n.mdx,{previous:i,next:E,post:h}=t;return r.createElement(o.A,null,r.createElement(u.ThemeProvider,{theme:m.w4},r.createElement(m.nB,null,r.createElement(c.A,null),r.createElement(d,null,r.createElement(m.DZ,{className:"text-center"},a.title),r.createElement("p",{className:"text-center"},h.frontmatter.date),l,i&&r.createElement(r.Fragment,null,i&&r.createElement(s.N_,{to:i.fields.slug},r.createElement("p",null,i.frontmatter.title))),E&&r.createElement(r.Fragment,null,E&&r.createElement(s.N_,{to:E.fields.slug},r.createElement("p",null,E.frontmatter.title)))),r.createElement(p.A,null))))}function h(e){return r.createElement(E,e,r.createElement(i,e))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-template-tsx-content-file-path-posts-2024-2024-10-06-another-leetcode-index-mdx-d299b3ffeeb9ab8c1e93.js.map