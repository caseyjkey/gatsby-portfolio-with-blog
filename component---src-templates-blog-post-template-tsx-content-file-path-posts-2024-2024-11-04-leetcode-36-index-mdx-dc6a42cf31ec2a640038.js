"use strict";(self.webpackChunkportfolio_app=self.webpackChunkportfolio_app||[]).push([[2588],{904:function(e,n,t){t.r(n),t.d(n,{BlogPost:function(){return p},default:function(){return g}});var l=t(8453),r=t(6540);function a(e){const n=Object.assign({p:"p",h1:"h1",pre:"pre",code:"code",h2:"h2"},(0,l.R)(),e.components);return r.createElement(r.Fragment,null,r.createElement(n.p,null,"Now, I am working on matrix problems."),"\n",r.createElement(n.h1,null,"Solution"),"\n",r.createElement(n.p,null,"This is my initial greedy solution."),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-python"},"class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        for row in board:\n            rowVals = set()\n            for column in row:\n                if column != '.' and column in rowVals:\n                    return False\n                rowVals.add(column)\n\n        for col in range(len(board[0])):\n            colVals = set()\n            for row in board:\n                if row[col] != '.' and row[col] in colVals:\n                    return False\n                colVals.add(row[col])\n\n        for subX in range(3):\n            for subY in range(3):\n                gridVals = set()\n                for x in range(3):\n                    for y in range(3):\n                        cell = board[subY * 3 + y][subX * 3 + x]\n                        if cell != '.' and cell in gridVals:\n                            return False\n                        gridVals.add(board[subY * 3 + y][subX * 3 + x])\n        \n        return True\n")),"\n",r.createElement(n.h2,null,"Improvements"),"\n",r.createElement(n.p,null,"Now, I reviewed other solutions and liked this one which uses a list of tuples and only one nested for loop."),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-python"},"class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        vals = []\n        for i, row in enumerate(board):\n            for j, x in enumerate(row):\n                if x != '.':\n                    vals += [(x, j), (i, x), (x, i // 3, j // 3)]\n        return len(vals) == len(set(vals))\n")),"\n",r.createElement(n.p,null,"I like how tuples are made unique by swapping their position, and the cell value is not mistaken for the row/column because it is a string rather than int.\nO(n) = 1 since board size is fixed."))}var o=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.R)(),e.components);return n?r.createElement(n,e,r.createElement(a,e)):a(e)},s=t(4810),i=t(4399),c=t(3614),u=t(1510),m=t(6409),d=t(572);const p=u.default.div.withConfig({displayName:"blogPostTemplate__BlogPost",componentId:"sc-6bdelx-0"})(["margin:0 auto;margin-top:6em;max-width:800px;padding:20px;"]);function f(e){let{data:n,pageContext:t,children:l}=e;const{frontmatter:a}=n.mdx,{previous:o,next:f,post:g}=t;return r.createElement(i.A,null,r.createElement(u.ThemeProvider,{theme:c.w4},r.createElement(c.nB,null,r.createElement(m.A,null),r.createElement(p,null,r.createElement(c.DZ,{className:"text-center"},a.title),r.createElement("p",{className:"text-center"},g.frontmatter.date),l,o&&r.createElement(r.Fragment,null,o&&r.createElement(s.N_,{to:o.fields.slug},r.createElement("p",null,o.frontmatter.title))),f&&r.createElement(r.Fragment,null,f&&r.createElement(s.N_,{to:f.fields.slug},r.createElement("p",null,f.frontmatter.title)))),r.createElement(d.A,null))))}function g(e){return r.createElement(f,e,r.createElement(o,e))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-template-tsx-content-file-path-posts-2024-2024-11-04-leetcode-36-index-mdx-dc6a42cf31ec2a640038.js.map